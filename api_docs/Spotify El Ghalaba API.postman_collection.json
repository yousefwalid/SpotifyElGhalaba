{
	"info": {
		"_postman_id": "b562a3b5-ba8f-457a-9117-95b9cc08e815",
		"name": "Spotify El Ghalaba API",
		"description": "The API for the Spotify-like, Spotify El Ghalaba",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Albums",
			"item": [
				{
					"name": "Get an Album",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"description": "**Type:** String \\\n**Required** A valid JWT access token",
								"key": "Authorization",
								"type": "text",
								"value": "{{JWT}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/albums/:id",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"albums",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "",
									"description": "**Type:** String \\\n **Required** The Spotify ID for the album"
								}
							]
						},
						"description": "## Description\nGet Spotify catalog information for a single album.\n## Response\nOn success, the HTTP status code in the response header is `200` OK and the response body contains an album object in JSON format. On error, the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Get an Album (Done)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "**Type:** String \\\n**Required** A valid JWT access token",
										"key": "Authorization",
										"type": "text",
										"value": "{{JWT}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/albums/:id",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"albums",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "5e66a93e4c64aa1ef03384d0",
											"description": "**Type:** String \\\n **Required** The Spotify ID for the album"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "99"
								},
								{
									"key": "Date",
									"value": "Fri, 13 Mar 2020 14:14:07 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1584111684"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "26442"
								},
								{
									"key": "ETag",
									"value": "W/\"674a-9PmlC/mFy9U9pM8cAs1AKIcYAro\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"artists\": [],\n    \"genres\": [],\n    \"tracks\": [\n        {\n            \"artists\": [],\n            \"disc_number\": 1,\n            \"external_urls\": [\n                {\n                    \"spotify\": \"https://open.spotify.com/track/11dFghVXANMlKmJXsNCbNl\"\n                }\n            ],\n            \"type\": \"track\",\n            \"duration_ms\": 207959,\n            \"explicit\": false,\n            \"href\": \"https://api.spotify.com/v1/tracks/11dFghVXANMlKmJXsNCbNl\",\n            \"name\": \"Cut To The Feeling\",\n            \"track_number\": 1,\n            \"__v\": 0,\n            \"uri\": \"spotify:track:5e66c093fe136f38ec718ed9\",\n            \"id\": \"5e66c093fe136f38ec718ed9\"\n        },\n        {\n            \"artists\": [],\n            \"disc_number\": 1,\n            \"external_urls\": [\n                {\n                    \"spotify\": \"https://open.spotify.com/track/11dFghVXANMlKmJXsNCbNl\"\n                }\n            ],\n            \"type\": \"track\",\n            \"duration_ms\": 207959,\n            \"explicit\": false,\n            \"href\": \"https://api.spotify.com/v1/tracks/11dFghVXANMlKmJXsNCbNl\",\n            \"name\": \"Cut To The Feeling\",\n            \"track_number\": 1,\n            \"__v\": 0,\n            \"uri\": \"spotify:track:5e66c09cfe136f38ec718edb\",\n            \"id\": \"5e66c09cfe136f38ec718edb\"\n        },\n        {\n            \"artists\": [],\n            \"disc_number\": 1,\n            \"external_urls\": [\n                {\n                    \"spotify\": \"https://open.spotify.com/track/11dFghVXANMlKmJXsNCbNl\"\n                }\n            ],\n            \"type\": \"track\",\n            \"duration_ms\": 207959,\n            \"explicit\": false,\n            \"href\": \"https://api.spotify.com/v1/tracks/11dFghVXANMlKmJXsNCbNl\",\n            \"name\": \"Cut To The Feeling\",\n            \"track_number\": 1,\n            \"__v\": 0,\n            \"uri\": \"spotify:track:5e66c09efe136f38ec718edd\",\n            \"id\": \"5e66c09efe136f38ec718edd\"\n        },\n        {\n            \"artists\": [],\n            \"disc_number\": 1,\n            \"external_urls\": [\n                {\n                    \"spotify\": \"https://open.spotify.com/track/11dFghVXANMlKmJXsNCbNl\"\n                }\n            ],\n            \"type\": \"track\",\n            \"duration_ms\": 207959,\n            \"explicit\": false,\n            \"href\": \"https://api.spotify.com/v1/tracks/11dFghVXANMlKmJXsNCbNl\",\n            \"name\": \"Cut To The Feeling\",\n            \"track_number\": 1,\n            \"__v\": 0,\n            \"uri\": \"spotify:track:5e66c0ad28c5ad381044b09f\",\n            \"id\": \"5e66c0ad28c5ad381044b09f\"\n        },\n        {\n            \"artists\": [],\n            \"disc_number\": 1,\n            \"external_urls\": [\n                {\n                    \"spotify\": \"https://open.spotify.com/track/11dFghVXANMlKmJXsNCbNl\"\n                }\n            ],\n            \"type\": \"track\",\n            \"duration_ms\": 207959,\n            \"explicit\": false,\n            \"href\": \"https://api.spotify.com/v1/tracks/11dFghVXANMlKmJXsNCbNl\",\n            \"name\": \"Cut To The Feeling\",\n            \"track_number\": 1,\n            \"__v\": 0,\n            \"uri\": \"spotify:track:5e66c0da28c5ad381044b0a1\",\n            \"id\": \"5e66c0da28c5ad381044b0a1\"\n        },\n        {\n            \"artists\": [],\n            \"disc_number\": 1,\n            \"external_urls\": [\n                {\n                    \"spotify\": \"https://open.spotify.com/track/11dFghVXANMlKmJXsNCbNl\"\n                }\n            ],\n            \"type\": \"track\",\n            \"duration_ms\": 207959,\n            \"explicit\": false,\n            \"href\": \"https://api.spotify.com/v1/tracks/11dFghVXANMlKmJXsNCbNl\",\n            \"name\": \"Cut To The Feeling\",\n            \"track_number\": 1,\n            \"__v\": 0,\n            \"uri\": \"spotify:track:5e66c0ee4ea5071628fca13f\",\n            \"id\": \"5e66c0ee4ea5071628fca13f\"\n        }\n    ],\n    \"album_type\": \"album\",\n    \"name\": \"She's So Unusual\",\n    \"popularity\": 39,\n    \"release_date\": \"1983-01-01T00:00:00.000Z\",\n    \"images\": [],\n    \"uri\": \"spotify:track:5e66a93e4c64aa1ef03384d0\",\n    \"type\": \"album\",\n    \"href\": \"http://localhost:3000/v1/albums/5e66a93e4c64aa1ef03384d0\",\n    \"id\": \"5e66a93e4c64aa1ef03384d0\"\n}"
						}
					]
				},
				{
					"name": "Get an Album's Tracks",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"description": "**Required** A valid JWT access token\n\n",
								"key": "Authorization",
								"type": "text",
								"value": "{{JWT}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/albums/:id/tracks?offset=&limit=",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"albums",
								":id",
								"tracks"
							],
							"query": [
								{
									"key": "offset",
									"value": "",
									"description": "**Type** Integer\\\n**Optional** The index of the first track to return. Default: 0 (the first object). Use with limit to get the next set of tracks.\n"
								},
								{
									"key": "limit",
									"value": ""
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "",
									"description": "**Type** String\\\n**Required** The Spotify ID for the album."
								}
							]
						},
						"description": "## Description\nGet Spotify catalog information about an album’s tracks. Optional parameters can be used to limit the number of tracks returned.\n## Response\nOn success, the HTTP status code in the response header is `200` OK and the response body contains an array of simplified track objects (wrapped in a paging object) in JSON format. On error, the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Get an Album's Tracks (Done)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "**Required** A valid JWT access token\n\n",
										"key": "Authorization",
										"type": "text",
										"value": "{{JWT}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/albums/:id/tracks?offset=2&limit=2",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"albums",
										":id",
										"tracks"
									],
									"query": [
										{
											"key": "offset",
											"value": "2",
											"description": "**Type** Integer\\\n**Optional** The index of the first track to return. Default: 0 (the first object). Use with limit to get the next set of tracks.\n"
										},
										{
											"key": "limit",
											"value": "2"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "5e6b921a1229f9354cef69dc",
											"description": "**Type** String\\\n**Required** The Spotify ID for the album."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "99"
								},
								{
									"key": "Date",
									"value": "Tue, 17 Mar 2020 12:17:15 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1584451035"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "976"
								},
								{
									"key": "ETag",
									"value": "W/\"3d0-qKs0UbrYJ3TxdLbPqgEG1rOYCkE\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"href\": \"http://localhost:3000/v1/albums/5e6b921a1229f9354cef69dc/tracks?offset=2&limit=2\",\n    \"items\": [\n        {\n            \"artists\": [],\n            \"disc_number\": 1,\n            \"external_urls\": [],\n            \"name\": \"Beautiful lies\",\n            \"album\": \"5e6b921a1229f9354cef69dc\",\n            \"duration_ms\": 5000,\n            \"explicit\": false,\n            \"is_playable\": true,\n            \"track_number\": 4,\n            \"__v\": 0,\n            \"type\": \"track\",\n            \"uri\": \"spotify:track:5e6fc15414584539a85da381\",\n            \"href\": \"http://localhost:3000/api/v1/tracks/5e6fc15414584539a85da381\",\n            \"id\": \"5e6fc15414584539a85da381\"\n        },\n        {\n            \"artists\": [],\n            \"disc_number\": 1,\n            \"external_urls\": [],\n            \"name\": \"People help the people\",\n            \"album\": \"5e6b921a1229f9354cef69dc\",\n            \"duration_ms\": 5000,\n            \"explicit\": false,\n            \"is_playable\": true,\n            \"track_number\": 5,\n            \"__v\": 0,\n            \"type\": \"track\",\n            \"uri\": \"spotify:track:5e6fe1929675d13810e546e6\",\n            \"href\": \"http://localhost:3000/api/v1/tracks/5e6fe1929675d13810e546e6\",\n            \"id\": \"5e6fe1929675d13810e546e6\"\n        }\n    ],\n    \"limit\": 2,\n    \"next\": \"http://localhost:3000/api/v1/albums/?offset=4&limit=2\",\n    \"offset\": 2,\n    \"previous\": \"http://localhost:3000/api/v1/albums/?offset=0&limit=2\",\n    \"total\": 4\n}"
						}
					]
				},
				{
					"name": "Get Several Albums",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"description": "**Required** A valid JWT access token",
								"key": "Authorization",
								"type": "text",
								"value": "{{JWT}}"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/albums?ids=",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"albums"
							],
							"query": [
								{
									"key": "ids",
									"value": "",
									"description": "**Type:** String\\\n**Required** A comma-separated list of the Spotify IDs for the albums. Maximum: 20 IDs.\n"
								}
							]
						},
						"description": "## Description\nGet Spotify catalog information for multiple albums identified by their Spotify IDs.\n## Response\nOn success, the HTTP status code in the response header is `200` OK and the response body contains an object whose key is `\"albums\"` and whose value is an array of album objects in JSON format.\n\nObjects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position. Duplicate `ids` in the query will result in duplicate objects in the response. On error, the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Get Several Albums (Done)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "**Required** A valid JWT access token",
										"key": "Authorization",
										"type": "text",
										"value": "{{JWT}}"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/albums?ids=5e89e1e22e9acf202cc3f289,5e8a200f5f78122b60c42b13,5e8a200f5f78122b60c42b12",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"albums"
									],
									"query": [
										{
											"key": "ids",
											"value": "5e89e1e22e9acf202cc3f289,5e8a200f5f78122b60c42b13,5e8a200f5f78122b60c42b12",
											"description": "**Type:** String\\\n**Required** A comma-separated list of the Spotify IDs for the albums. Maximum: 20 IDs.\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "98"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Apr 2020 19:05:56 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586117025"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "760"
								},
								{
									"key": "ETag",
									"value": "W/\"2f8-7Mjr1S47TH4kqqNHg3WqD7AvYxs\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"Albums\": [\n        {\n            \"artists\": [\n                \"5e88e82ca532d34e1c8575b5\"\n            ],\n            \"genres\": [\n                \"Rock\",\n                \"jazz\"\n            ],\n            \"tracks\": [\n                \"5e89e3032e9acf202cc3f28a\"\n            ],\n            \"album_type\": \"album\",\n            \"name\": \"Kings Never Die\",\n            \"release_date\": \"2020-04-05T13:49:22.374Z\",\n            \"images\": [],\n            \"__v\": 1,\n            \"uri\": \"spotify:track:5e89e1e22e9acf202cc3f289\",\n            \"type\": \"album\",\n            \"href\": \"http://localhost:3000/api/v1/albums/5e89e1e22e9acf202cc3f289\",\n            \"id\": \"5e89e1e22e9acf202cc3f289\"\n        },\n        {\n            \"artists\": [\n                \"5e8902a1412533282c4bd342\"\n            ],\n            \"genres\": [\n                \"Rock\",\n                \"jazz\"\n            ],\n            \"tracks\": [],\n            \"album_type\": \"album\",\n            \"label\": \"albumLabel\",\n            \"name\": \"Test Album2\",\n            \"release_date\": \"2020-04-05T18:14:38.975Z\",\n            \"images\": [],\n            \"__v\": 0,\n            \"uri\": \"spotify:track:5e8a200f5f78122b60c42b13\",\n            \"type\": \"album\",\n            \"href\": \"http://localhost:3000/api/v1/albums/5e8a200f5f78122b60c42b13\",\n            \"id\": \"5e8a200f5f78122b60c42b13\"\n        },\n        null\n    ]\n}"
						}
					]
				},
				{
					"name": "Create Album",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"album_type\":\"album\",\n\t\"genres\":[\"Rock\",\"jazz\"],\n\t\"label\":\"albumLabel\",\n\t\"name\":\"Test Album2\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/albums",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"albums"
							]
						},
						"description": "## Description\nAdds a new Album\n\n## Response\nOn Success, the response body contains the created Album object and the response header is `201` Created. \nOn error, the header status code is an `error code` and the response body contains an error object."
					},
					"response": [
						{
							"name": "Create Album (Done)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"album_type\":\"album\",\n\t\"genres\":[\"Rock\",\"jazz\"],\n\t\"label\":\"albumLabel\",\n\t\"name\":\"Test Album2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}api/v1/albums",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"albums"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "97"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Apr 2020 18:14:38 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586114035"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "366"
								},
								{
									"key": "ETag",
									"value": "W/\"16e-gUxDm2rJA58hJkWIFMVv0KzbZ7o\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"artists\": [\n        \"5e8902a1412533282c4bd342\"\n    ],\n    \"genres\": [\n        \"Rock\",\n        \"jazz\"\n    ],\n    \"tracks\": [],\n    \"album_type\": \"album\",\n    \"label\": \"albumLabel\",\n    \"name\": \"Test Album2\",\n    \"release_date\": \"2020-04-05T18:14:38.975Z\",\n    \"images\": [],\n    \"__v\": 0,\n    \"uri\": \"spotify:track:5e8a200f5f78122b60c42b13\",\n    \"type\": \"album\",\n    \"href\": \"http://localhost:3000/api/v1/albums/5e8a200f5f78122b60c42b13\",\n    \"id\": \"5e8a200f5f78122b60c42b13\"\n}"
						}
					]
				},
				{
					"name": "Add album image [NOT DONE]",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"type": "file",
									"src": "/C:/Users/Ahmed Hisham/Pictures/milky_way_starry_sky_galaxy_119519_1920x1200.jpg"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/albums/:id/images",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"albums",
								":id",
								"images"
							],
							"variable": [
								{
									"key": "id",
									"value": "askljdklajdklsa"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Artists",
			"item": [
				{
					"name": "Get Multiple Artists [NOT UPDATED]",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"description": "**Required** A valid JWT access token.",
								"key": "Authorization",
								"type": "text",
								"value": "{{JWT}}"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/artists?ids=",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"artists"
							],
							"query": [
								{
									"key": "ids",
									"value": "",
									"description": "**Type:** String\\\n**Required** A comma-separated list of the Spotify IDs for the artists.\\\n**Maximum:** 50 IDs."
								}
							]
						},
						"description": "## Description\nGet Spotify catalog information for several artists based on their Spotify IDs.\n\n## Response\nOn success, the HTTP status code in the response header is `200` OK and the response body contains an object whose key is `\"artists\"` and whose value is an array of artist objects in JSON format.\\\nObjects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position. Duplicate `ids` in the query will result in duplicate objects in the response.\\\nOn error, the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Get Multiple Artists",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "**Required** A valid JWT access token.",
										"key": "Authorization",
										"type": "text",
										"value": "{{JWT}}"
									}
								],
								"url": {
									"raw": "{{URL}}v1/artists?ids=0oSGxfWSnnOXhD2fKuz2Gy,3dBVyJ7JuOMt4GE9607Qin",
									"host": [
										"{{URL}}v1"
									],
									"path": [
										"artists"
									],
									"query": [
										{
											"key": "ids",
											"value": "0oSGxfWSnnOXhD2fKuz2Gy,3dBVyJ7JuOMt4GE9607Qin",
											"description": "**Type:** String\\\n**Required** A comma-separated list of the Spotify IDs for the artists.\\\n**Maximum:** 50 IDs."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "1563"
								},
								{
									"key": "ETag",
									"value": "W/\"61b-B17ZG4UwlgQR66PD0vDEHLPV5gg\""
								},
								{
									"key": "Date",
									"value": "Thu, 05 Mar 2020 19:23:30 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"artists\": [\n        {\n            \"external_urls\": {\n                \"spotify\": \"https://open.spotify.com/artist/0oSGxfWSnnOXhD2fKuz2Gy\"\n            },\n            \"followers\": {\n                \"href\": null,\n                \"total\": 633494\n            },\n            \"genres\": [\n                \"art rock\",\n                \"glam rock\",\n                \"permanent wave\"\n            ],\n            \"href\": \"https://api.spotify.com/v1/artists/0oSGxfWSnnOXhD2fKuz2Gy\",\n            \"id\": \"0oSGxfWSnnOXhD2fKuz2Gy\",\n            \"images\": [\n                {\n                    \"height\": 1000,\n                    \"url\": \"https://i.scdn.co/image/32bd9707b42a2c081482ec9cd3ffa8879f659f95\",\n                    \"width\": 1000\n                },\n                {\n                    \"height\": 640,\n                    \"url\": \"https://i.scdn.co/image/865f24753e5e4f40a383bf24a9cdda598a4559a8\",\n                    \"width\": 640\n                },\n                {\n                    \"height\": 200,\n                    \"url\": \"https://i.scdn.co/image/7ddd6fa5cf78aee2f2e8b347616151393022b7d9\",\n                    \"width\": 200\n                },\n                {\n                    \"height\": 64,\n                    \"url\": \"https://i.scdn.co/image/c8dc28c191432862afce298216458a6f00bbfbd8\",\n                    \"width\": 64\n                }\n            ],\n            \"name\": \"David Bowie\",\n            \"popularity\": 77,\n            \"type\": \"artist\",\n            \"uri\": \"spotify:artist:0oSGxfWSnnOXhD2fKuz2Gy\"\n        },\n        {\n            \"external_urls\": {\n                \"spotify\": \"https://open.spotify.com/artist/3dBVyJ7JuOMt4GE9607Qin\"\n            },\n            \"followers\": {\n                \"href\": null,\n                \"total\": 52338\n            },\n            \"genres\": [\n                \"glam rock\",\n                \"protopunk\"\n            ],\n            \"href\": \"https://api.spotify.com/v1/artists/3dBVyJ7JuOMt4GE9607Qin\",\n            \"id\": \"3dBVyJ7JuOMt4GE9607Qin\",\n            \"images\": [\n                {\n                    \"height\": 1300,\n                    \"url\": \"https://i.scdn.co/image/5515a710c94ccd4edd8b9a0587778ed5e3f997da\",\n                    \"width\": 1000\n                },\n                {\n                    \"height\": 832,\n                    \"url\": \"https://i.scdn.co/image/c990e667b4ca8240c73b0db06e6d76a3b27ce929\",\n                    \"width\": 640\n                },\n                {\n                    \"height\": 260,\n                    \"url\": \"https://i.scdn.co/image/de2fa1d11c59e63143117d44ec9990b9e40451a2\",\n                    \"width\": 200\n                },\n                {\n                    \"height\": 83,\n                    \"url\": \"https://i.scdn.co/image/b39638735adb4a4a54621293b99ab65c546f605e\",\n                    \"width\": 64\n                }\n            ],\n            \"name\": \"T. Rex\",\n            \"popularity\": 58,\n            \"type\": \"artist\",\n            \"uri\": \"spotify:artist:3dBVyJ7JuOMt4GE9607Qin\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get an Artist [NOT UPDATED]",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"description": "**Required** A valid JWT access token.",
								"key": "Authorization",
								"type": "text",
								"value": "{{JWT}}"
							},
							{
								"description": "**Required** The content type of the request body: `application/json`",
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/artists/:id",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"artists",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "",
									"description": "**Type:** String\\\n**Required** The Spotify ID of the artist."
								}
							]
						},
						"description": "## Description\nGet Spotify catalog information for a single artist identified by their unique Spotify ID.\n\n## Response\nOn success, the HTTP status code in the response header is `200` OK and the response body contains an artist object in JSON format. On error, the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Get an Artist",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "**Required** A valid JWT access token.",
										"key": "Authorization",
										"type": "text",
										"value": "{{JWT}}"
									},
									{
										"description": "**Required** The content type of the request body: `application/json`",
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}v1/artists/:id",
									"host": [
										"{{URL}}v1"
									],
									"path": [
										"artists",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "0OdUWJ0sBjDrqHygGUXeCF",
											"description": "**Type:** String\\\n**Required** The Spotify ID of the artist."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "772"
								},
								{
									"key": "ETag",
									"value": "W/\"304-5KfuMOccpbHK2RaG4cT3RjoULgE\""
								},
								{
									"key": "Date",
									"value": "Thu, 05 Mar 2020 19:46:47 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"external_urls\": {\n        \"spotify\": \"https://open.spotify.com/artist/0OdUWJ0sBjDrqHygGUXeCF\"\n    },\n    \"followers\": {\n        \"href\": null,\n        \"total\": 306565\n    },\n    \"genres\": [\n        \"indie folk\",\n        \"indie pop\"\n    ],\n    \"href\": \"https://api.spotify.com/v1/artists/0OdUWJ0sBjDrqHygGUXeCF\",\n    \"id\": \"0OdUWJ0sBjDrqHygGUXeCF\",\n    \"images\": [\n        {\n            \"height\": 816,\n            \"url\": \"https://i.scdn.co/image/eb266625dab075341e8c4378a177a27370f91903\",\n            \"width\": 1000\n        },\n        {\n            \"height\": 522,\n            \"url\": \"https://i.scdn.co/image/2f91c3cace3c5a6a48f3d0e2fd21364d4911b332\",\n            \"width\": 640\n        },\n        {\n            \"height\": 163,\n            \"url\": \"https://i.scdn.co/image/2efc93d7ee88435116093274980f04ebceb7b527\",\n            \"width\": 200\n        },\n        {\n            \"height\": 52,\n            \"url\": \"https://i.scdn.co/image/4f25297750dfa4051195c36809a9049f6b841a23\",\n            \"width\": 64\n        }\n    ],\n    \"name\": \"Band of Horses\",\n    \"popularity\": 59,\n    \"type\": \"artist\",\n    \"uri\": \"spotify:artist:0OdUWJ0sBjDrqHygGUXeCF\"\n}"
						}
					]
				},
				{
					"name": "Get an Artist's Albums [NOT UPDATED]",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"description": "**Required** A valid JWT access token.",
								"key": "Authorization",
								"type": "text",
								"value": "{{JWT}}"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/artists/:id/albums?include_groups=&limit=&offset=",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"artists",
								":id",
								"albums"
							],
							"query": [
								{
									"key": "include_groups",
									"value": "",
									"description": "**Type:** String\\\n**Optional** A comma-separated list of keywords that will be used to filter the response. If not supplied, all album types will be returned. Valid values are:\n- `album`\n- `single`\n- `appears_on`\n- `compilation`\nFor example: `include_groups=album,single`."
								},
								{
									"key": "limit",
									"value": "",
									"description": "**Type:** Integer\\\n**Optional** The number of album objects to return.\\\n**Default:** 20.\\\n**Minimum:** 1.\\\n**Maximum:** 50.\\\nFor example: `limit=2`"
								},
								{
									"key": "offset",
									"value": "",
									"description": "**Type:** Integer\\\n**Optional** The index of the first album to return.\\\n**Default:** 0 (i.e., the first album).\\\nUse with `limit` to get the next set of albums"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "",
									"description": "**Type:** String\\\n**Required** The Spotify ID of the artist."
								}
							]
						},
						"description": "## Description\nGet Spotify catalog information about an artist’s albums. Optional parameters can be specified in the query string to filter and sort the response.\n\n## Response\nOn success, the HTTP status code in the response header is `200` OK and the response body contains an array of simplified album objects (wrapped in a paging object) in JSON format.\\\nOn error, the header status code is an error code and the response body contains an error object."
					},
					"response": []
				},
				{
					"name": "Get an Artist's Top Tracks [NOT DONE]",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"description": "**Required** A valid JWT access token.",
								"key": "Authorization",
								"type": "text",
								"value": "{{JWT}}"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/artists/:id/top-tracks",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"artists",
								":id",
								"top-tracks"
							],
							"variable": [
								{
									"key": "id",
									"value": "",
									"description": "**Type:** String\\\n**Required** The Spotify ID of the artist."
								}
							]
						},
						"description": "## Description\nGet Spotify catalog information about an artist’s top tracks by country.\n\n## Response\nOn success, the HTTP status code in the response header is `200` OK and the response body contains an object whose key is `\"tracks\"` and whose value is an array of up to 10 track objects in JSON format. On error, the header status code is an error code and the response body contains an error object.\n\n\n"
					},
					"response": [
						{
							"name": "Get an Artist's Top Tracks",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "**Required** A valid JWT access token.",
										"key": "Authorization",
										"type": "text",
										"value": "{{JWT}}"
									}
								],
								"url": {
									"raw": "{{URL}}v1/artists/:id/top-tracks",
									"host": [
										"{{URL}}v1"
									],
									"path": [
										"artists",
										":id",
										"top-tracks"
									],
									"variable": [
										{
											"key": "id",
											"value": "43ZHCT0cAZBISjO8DG9PnE",
											"description": "**Type:** String\\\n**Required** The Spotify ID of the artist."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "1666"
								},
								{
									"key": "ETag",
									"value": "W/\"682-tNCJ4VdYN9vT9fG+MeXwPOUOYLE\""
								},
								{
									"key": "Date",
									"value": "Thu, 05 Mar 2020 19:53:56 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"tracks\": [\n        {\n            \"album\": {\n                \"album_type\": \"album\",\n                \"artists\": [\n                    {\n                        \"external_urls\": {\n                            \"spotify\": \"https://open.spotify.com/artist/43ZHCT0cAZBISjO8DG9PnE\"\n                        },\n                        \"href\": \"https://api.spotify.com/v1/artists/43ZHCT0cAZBISjO8DG9PnE\",\n                        \"id\": \"43ZHCT0cAZBISjO8DG9PnE\",\n                        \"name\": \"Elvis Presley\",\n                        \"type\": \"artist\",\n                        \"uri\": \"spotify:artist:43ZHCT0cAZBISjO8DG9PnE\"\n                    }\n                ],\n                \"external_urls\": {\n                    \"spotify\": \"https://open.spotify.com/album/7xe8VI48TxUpU1IIo0RfGi\"\n                },\n                \"href\": \"https://api.spotify.com/v1/albums/7xe8VI48TxUpU1IIo0RfGi\",\n                \"id\": \"7xe8VI48TxUpU1IIo0RfGi\",\n                \"images\": [\n                    {\n                        \"height\": 640,\n                        \"url\": \"https://i.scdn.co/image/4295b5ff74d4f944367144acbe616b6f62d20b17\",\n                        \"width\": 640\n                    },\n                    {\n                        \"height\": 300,\n                        \"url\": \"https://i.scdn.co/image/203104e5843248c700b078f391d4bc759c5d7f47\",\n                        \"width\": 300\n                    },\n                    {\n                        \"height\": 64,\n                        \"url\": \"https://i.scdn.co/image/0c0a172373b0211c590b241270d05b70889075a1\",\n                        \"width\": 64\n                    }\n                ],\n                \"name\": \"Blue Hawaii\",\n                \"type\": \"album\",\n                \"uri\": \"spotify:album:7xe8VI48TxUpU1IIo0RfGi\"\n            },\n            \"artists\": [\n                {\n                    \"external_urls\": {\n                        \"spotify\": \"https://open.spotify.com/artist/43ZHCT0cAZBISjO8DG9PnE\"\n                    },\n                    \"href\": \"https://api.spotify.com/v1/artists/43ZHCT0cAZBISjO8DG9PnE\",\n                    \"id\": \"43ZHCT0cAZBISjO8DG9PnE\",\n                    \"name\": \"Elvis Presley\",\n                    \"type\": \"artist\",\n                    \"uri\": \"spotify:artist:43ZHCT0cAZBISjO8DG9PnE\"\n                }\n            ],\n            \"disc_number\": 1,\n            \"duration_ms\": 179773,\n            \"explicit\": false,\n            \"external_ids\": {\n                \"isrc\": \"USRC16101350\"\n            },\n            \"external_urls\": {\n                \"spotify\": \"https://open.spotify.com/track/44AyOl4qVkzS48vBsbNXaC\"\n            },\n            \"href\": \"https://api.spotify.com/v1/tracks/44AyOl4qVkzS48vBsbNXaC\",\n            \"id\": \"44AyOl4qVkzS48vBsbNXaC\",\n            \"name\": \"Can't Help Falling in Love\",\n            \"popularity\": 70,\n            \"preview_url\": \"https://p.scdn.co/mp3-preview/26e409b39a2da6dc18fab61020c90be2938dc0e9\",\n            \"track_number\": 5,\n            \"type\": \"track\",\n            \"uri\": \"spotify:track:44AyOl4qVkzS48vBsbNXaC\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get an Artist's Related Artists [NOT DONE]",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"description": "**Required** A valid JWT access token.",
								"key": "Authorization",
								"type": "text",
								"value": "{{JWT}}"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/artists/:id/related-artists",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"artists",
								":id",
								"related-artists"
							],
							"variable": [
								{
									"key": "id",
									"value": "",
									"description": "**Type:** String\\\n**Required** The Spotify ID for the artist"
								}
							]
						},
						"description": "## Description\nGet Spotify catalog information about artists similar to a given artist. Similarity is based on analysis of the Spotify community’s listening history.\n\n## Response\nOn success, the HTTP status code in the response header is `200` OK and the response body contains an object whose key is `\"artists\"` and whose value is an array of up to 20 artist objects in JSON format. On error, the header status code is an error code and the response body contains an error object.\n"
					},
					"response": [
						{
							"name": "Get an Artist's Related Artists",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "**Required** A valid JWT access token.",
										"key": "Authorization",
										"type": "text",
										"value": "{{JWT}}"
									}
								],
								"url": {
									"raw": "{{URL}}v1/artists/:id/related-artists",
									"host": [
										"{{URL}}v1"
									],
									"path": [
										"artists",
										":id",
										"related-artists"
									],
									"variable": [
										{
											"key": "id",
											"value": "43ZHCT0cAZBISjO8DG9PnE",
											"description": "**Type:** String\\\n**Required** The Spotify ID for the artist"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "772"
								},
								{
									"key": "ETag",
									"value": "W/\"304-UHwCr5N1qAzq8GGmu+EjackAajg\""
								},
								{
									"key": "Date",
									"value": "Thu, 05 Mar 2020 20:01:28 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"artists\": [\n        {\n            \"external_urls\": {\n                \"spotify\": \"https://open.spotify.com/artist/5ZKMPRDHc7qElVJFh3uRqB\"\n            },\n            \"followers\": {\n                \"href\": null,\n                \"total\": 18108\n            },\n            \"genres\": [\n                \"rockabilly\"\n            ],\n            \"href\": \"https://api.spotify.com/v1/artists/5ZKMPRDHc7qElVJFh3uRqB\",\n            \"id\": \"5ZKMPRDHc7qElVJFh3uRqB\",\n            \"images\": [\n                {\n                    \"height\": 997,\n                    \"url\": \"https://i.scdn.co/image/beff5827580bcc4d129cbc0872768095eeba8c14\",\n                    \"width\": 1000\n                },\n                {\n                    \"height\": 638,\n                    \"url\": \"https://i.scdn.co/image/dbabf703779789917c4dd1c0e54da62c7a45ce92\",\n                    \"width\": 640\n                },\n                {\n                    \"height\": 199,\n                    \"url\": \"https://i.scdn.co/image/74761c343bec27c814b8e44e4bc095cbf1b674bb\",\n                    \"width\": 200\n                },\n                {\n                    \"height\": 64,\n                    \"url\": \"https://i.scdn.co/image/0c30af5647c74fee14fb97981c23b336abbc9f21\",\n                    \"width\": 64\n                }\n            ],\n            \"name\": \"Wanda Jackson\",\n            \"popularity\": 59,\n            \"type\": \"artist\",\n            \"uri\": \"spotify:artist:5ZKMPRDHc7qElVJFh3uRqB\"\n        }\n    ]\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Signup ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "12323cc7-98fa-4f6e-a09f-83c72c202591",
								"exec": [
									"//Now for any response we would parse the response to json and put the token property in an env. variable called jwt",
									"pm.environment.set(\"jwt\", pm.response.json().token);    //pm => postman, enviroment=> env variable, .json() => convert to json",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Forwarded-For",
								"value": "197.52.255.130",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"I'm a-user\",\n\t\"email\": \"user90@spotify.com\",\n\t\"password\": \"{{password}}\",\n\t\"passwordConfirm\": \"{{password}}\",\n\t\"gender\": \"m\",\n\t\"birthdate\": \"1999-5-10\",\n\t\"type\": \"user\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/authentication/signup",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"authentication",
								"signup"
							]
						},
						"description": "## Description\n\nTakes a new user's data and signs him up.\n\n## Request\n\nPlease make sure to have a `X-Forwarded-For` header in your request containing your public ip address\n\n## Response\n\nOn success `200 OK` status code is returned and: <br/>\n<a href = \"https://developer.spotify.com/documentation/web-api/reference/object-model/#user-object-private\">A user object</a> in case the request is sent with type user.<br/>\nOR<br/>\n<a href = \"https://developer.spotify.com/documentation/web-api/reference/object-model/#artist-object-full\">An artist object</a> in case the request is sent with type artist.<br/>\nOn fail for invalid data `400\tBad Request`  status code and an error object are sent back.\n\n## Body Params\n\nname: string `required` <br/>\nemail: email `required` <br/>\npassword: min 8 characters`required` <br/>\npasswordConfirm: `required` <br/>\ngender: 'm' or 'f' `required` <br/>\nbirthdate: unix timestamp `required` <br/>\ntype: user/artist `required` <br/>"
					},
					"response": [
						{
							"name": "signup",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"I'm an-artist\",\n\t\"email\": \"artist16@spotify.com\",\n\t\"password\": \"{{password}}\",\n\t\"passwordConfirm\": \"{{password}}\",\n\t\"gender\": \"f\",\n\t\"birthdate\": \"1999-3-2\",\n\t\"type\": \"artist\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}api/v1/authentication/signup",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"authentication",
										"signup"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVlNmI5NWZkYTE5MDM5MzVjY2IzNTVhMyIsImlhdCI6MTU4NDEwOTA1NCwiZXhwIjoxNTkxODg1MDU0fQ.V1HrFZESMiQZYynd1oLc9AAwRsR9mRyxFUNkuLfIl-A\",\n    \"data\": {\n        \"user\": {\n            \"external_urls\": [],\n            \"genres\": [],\n            \"_id\": \"5e6b95fda1903935ccb355a3\",\n            \"userInfo\": {\n                \"type\": \"artist\",\n                \"product\": \"free\",\n                \"image\": null,\n                \"currentlyPlaying\": null,\n                \"followers\": null,\n                \"_id\": \"5e6b95fda1903935ccb355a2\",\n                \"name\": \"I'm an-artist\",\n                \"email\": \"artist16@spotify.com\",\n                \"gender\": \"f\",\n                \"birthdate\": \"1999-03-25T00:00:00.000Z\",\n                \"country\": \"EG\",\n                \"devices\": [],\n                \"__v\": 0,\n                \"uri\": \"spotify:user:5e6b95fda1903935ccb355a2\",\n                \"id\": \"5e6b95fda1903935ccb355a2\"\n            },\n            \"followers\": [],\n            \"images\": [],\n            \"uri\": \"spotify:artist:5e6b95fda1903935ccb355a3\"\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "323b7518-09a9-44ba-b5bf-135a15d2fc38",
								"exec": [
									"//Now for any response we would parse the response to json and put the token property in an env. variable called jwt",
									"pm.environment.set(\"jwt\", pm.response.json().token);    //pm => postman, enviroment=> env variable, .json() => convert to json",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36 OPR/67.0.3575.53",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"artist10@spotify.com\",\n\t\"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/authentication/login",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"authentication",
								"login"
							]
						},
						"description": "## Description\n\nTakes a user's credentials and logs him in.\n\n## Response\n\nOn success `200 OK` status code is returned and: <br/>\n<a href = \"https://developer.spotify.com/documentation/web-api/reference/object-model/#user-object-private\">A user object</a> in case the request is sent to a user's account.<br/>\nOR<br/>\n<a href = \"https://developer.spotify.com/documentation/web-api/reference/object-model/#artist-object-full\">An artist object</a> in case the request is sent to an artist's account.<br/>\nOn fail for invalid data `400 Bad Request`  status code and an error object are sent back.\n\n## Body Params\n\nemail: email `required` <br/>\npassword: `required` <br/>"
					},
					"response": [
						{
							"name": "Login",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\": \"artist1@spotify.com\",\n\t\"password\": \"{{password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}api/v1/authentication/login",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"authentication",
										"login"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVlNmI3YWExZDBmZmI1MjM3ODZiZjg5NCIsImlhdCI6MTU4NDExMDQ5OCwiZXhwIjoxNTkxODg2NDk4fQ.gKPIzF-Ry-N9AGysfOw0a1m6hN6QbVYTJlsWXvsPZhM\",\n    \"data\": {\n        \"user\": {\n            \"external_urls\": [],\n            \"genres\": [],\n            \"_id\": \"5e6b7aa1d0ffb523786bf894\",\n            \"userInfo\": {\n                \"type\": \"artist\",\n                \"product\": \"free\",\n                \"image\": null,\n                \"currentlyPlaying\": null,\n                \"followers\": null,\n                \"_id\": \"5e6b7a84d0ffb523786bf893\",\n                \"name\": \"I'm an-artist\",\n                \"email\": \"artist1@spotify.com\",\n                \"gender\": \"f\",\n                \"birthdate\": \"1999-03-25T00:00:00.000Z\",\n                \"country\": \"EG\",\n                \"devices\": [],\n                \"__v\": 0,\n                \"uri\": \"spotify:user:5e6b7a84d0ffb523786bf893\",\n                \"id\": \"5e6b7a84d0ffb523786bf893\"\n            },\n            \"followers\": [],\n            \"images\": [],\n            \"uri\": \"spotify:artist:5e6b7aa1d0ffb523786bf894\"\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Forgot Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"artist1@spotify.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/authentication/forgotPassword",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"authentication",
								"forgotPassword"
							]
						},
						"description": "## Description\n\nTakes a user's email and <b>sends to his email a reset token</b>.\n\n## Response\n\nOn success `200 OK` status code and an empty body are sent back. <br/>\nOn fail for invalid email `404\tNOT FOUND`  status code and an error object are sent back.\n\n## Body Params\n\nemail: email `required` <br/>"
					},
					"response": [
						{
							"name": "Forgot Password",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\": \"artist1@spotify.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}api/v1/authentication/forgotPassword",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"authentication",
										"forgotPassword"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"message\": \"Token sent to email!\"\n}"
						}
					]
				},
				{
					"name": "Reset Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2cdd25a1-cfbe-45b5-aaec-bbd402ea2a5c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"password\": \"{{new password}}\",\n\t\"passwordConfirm\": \"{{new password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/authentication/resetPassword/:reset_token",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"authentication",
								"resetPassword",
								":reset_token"
							],
							"variable": [
								{
									"key": "reset_token",
									"value": "794795b138d92f12eb97f24930daf751c8aa9331b31466bd9a26e55d6049a66b",
									"description": "**Required**\nThe token taht's sent to the user's email."
								}
							]
						},
						"description": "## Description\n\nTakes a valid reset token(path parameter), password and passowrd confirm(specified in the body) and resets the user's password.\n\n## Response\n\nOn success `201 Created` status code is returned and: <br/>\n<a href = \"https://developer.spotify.com/documentation/web-api/reference/object-model/#user-object-private\">A user object</a> in case the request is sent from a user's account.<br/>\nOR<br/>\n<a href = \"https://developer.spotify.com/documentation/web-api/reference/object-model/#artist-object-full\">An artist object</a> in case the request is sent from an artist's account.<br/>\n\nOn fail for invalid or expired reset token `400 Bad Request`  status code and an error object are sent back.<br/>\nOn fail for invalid passwords `400\tBad request`  status code and an error object are sent back.\n\n## Body Params\n\npassword: `required` <br/>\npasswordConfirm: `required`"
					},
					"response": [
						{
							"name": "Reset Password",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"{{new password}}\",\n\t\"passwordConfirm\": \"{{new password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}api/v1/authentication/resetPassword/bf652cd5eee44abdf9dd1b23192607eaad229aaf2b48f4a4930623e823b9e200",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"authentication",
										"resetPassword",
										"bf652cd5eee44abdf9dd1b23192607eaad229aaf2b48f4a4930623e823b9e200"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVlNmI3YWExZDBmZmI1MjM3ODZiZjg5NCIsImlhdCI6MTU4NDExMDQ5OCwiZXhwIjoxNTkxODg2NDk4fQ.gKPIzF-Ry-N9AGysfOw0a1m6hN6QbVYTJlsWXvsPZhM\",\n    \"data\": {\n        \"user\": {\n            \"external_urls\": [],\n            \"genres\": [],\n            \"_id\": \"5e6b7aa1d0ffb523786bf894\",\n            \"userInfo\": {\n                \"type\": \"artist\",\n                \"product\": \"free\",\n                \"image\": null,\n                \"currentlyPlaying\": null,\n                \"followers\": null,\n                \"_id\": \"5e6b7a84d0ffb523786bf893\",\n                \"name\": \"I'm an-artist\",\n                \"email\": \"artist1@spotify.com\",\n                \"gender\": \"f\",\n                \"birthdate\": \"1999-03-25T00:00:00.000Z\",\n                \"country\": \"EG\",\n                \"devices\": [],\n                \"__v\": 0,\n                \"uri\": \"spotify:user:5e6b7a84d0ffb523786bf893\",\n                \"id\": \"5e6b7a84d0ffb523786bf893\"\n            },\n            \"followers\": [],\n            \"images\": [],\n            \"uri\": \"spotify:artist:5e6b7aa1d0ffb523786bf894\"\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Update Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51c79600-1460-4ca5-8079-267579d26b21",
								"exec": [
									"//Now for any response we would parse the response to json and put the token property in an env. variable called jwt",
									"pm.environment.set(\"jwt\", pm.response.json().token);    //pm => postman, enviroment=> env variable, .json() => convert to json",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"description": "**Required**\n A valid access token from the Spotify",
								"key": "Authorization",
								"type": "text",
								"value": "{{jwt}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"password\": \"{{password}}\",\n\t\"newPassword\": \"{{new password}}\",\n\t\"newPasswordConfirm\": \"{{new password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/authentication/updatePassword",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"authentication",
								"updatePassword"
							]
						},
						"description": "## Description\n\nUpdates the password of an authorized user.\n\n## Response\n\nOn success `201 Created` status code is returned and: <br/>\n<a href = \"https://developer.spotify.com/documentation/web-api/reference/object-model/#user-object-private\">A user object</a> in case the request is sent from a user's account.<br/>\nOR<br/>\n<a href = \"https://developer.spotify.com/documentation/web-api/reference/object-model/#artist-object-full\">An artist object</a> in case the request is sent from an artist's account.<br/>\nOn fail for invalid data `401\tUnauthorized`  status code and an error object are sent back.\n\n## Body Params\n\npassword: `required` <br/>\nnewPassword: `required` <br/>\nnewPasswordConfirm: `required` <br/>"
					},
					"response": [
						{
							"name": "Update Password",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"description": "**Required**\n A valid access token from the Spotify",
										"key": "Authorization",
										"type": "text",
										"value": "{{jwt}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"{{password}}\",\n\t\"newPassword\": \"{{new password}}\",\n\t\"newPasswordConfirm\": \"{{new password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}api/v1/authentication/updatePassword",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"authentication",
										"updatePassword"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVlNmI3YTg0ZDBmZmI1MjM3ODZiZjg5MyIsImlhdCI6MTU4NDExNTE5NiwiZXhwIjoxNTkxODkxMTk2fQ.ncsUYd7n6xR8v-MWt_RZGYygajZVjpIgbnXaG6hCBIM\",\n    \"data\": {\n        \"user\": {\n            \"external_urls\": [],\n            \"genres\": [],\n            \"_id\": \"5e6b7aa1d0ffb523786bf894\",\n            \"userInfo\": {\n                \"type\": \"artist\",\n                \"product\": \"free\",\n                \"image\": null,\n                \"currentlyPlaying\": null,\n                \"followers\": null,\n                \"_id\": \"5e6b7a84d0ffb523786bf893\",\n                \"name\": \"I'm an-artist\",\n                \"email\": \"artist1@spotify.com\",\n                \"gender\": \"f\",\n                \"birthdate\": \"1999-03-25T00:00:00.000Z\",\n                \"country\": \"EG\",\n                \"devices\": [],\n                \"__v\": 0,\n                \"passwordChangedAt\": \"2020-03-13T15:59:55.232Z\",\n                \"uri\": \"spotify:user:5e6b7a84d0ffb523786bf893\",\n                \"id\": \"5e6b7a84d0ffb523786bf893\"\n            },\n            \"followers\": [],\n            \"images\": [],\n            \"uri\": \"spotify:artist:5e6b7aa1d0ffb523786bf894\"\n        }\n    }\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Browse",
			"item": [
				{
					"name": "Add Category",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\n        \"name\": \"Rawa2an 2\",\n        \"icons\": [{\n          \"width\": 50,\n          \"height\": 50,\n          \"url\": \"/Rawa2an.png\"\n        }]\n}",
							"options": {}
						},
						"url": {
							"raw": "{{URL}}api/v1/browse/categories",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"browse",
								"categories"
							]
						},
						"description": "## Description\nAdding new category to the database\n\n## Response\nOn success, the HTTP status code in the response header is `201` OK and the response body contains a categorya object in JSON format. On error, the header status code is an error code and the response body contains an error object."
					},
					"response": []
				},
				{
					"name": "Get a Category",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{JWT}}",
								"description": "**Required.** A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user.",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/browse/categories/5e6c068d7789e710cfa19528",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"browse",
								"categories",
								"5e6c068d7789e710cfa19528"
							],
							"query": [
								{
									"key": "locale",
									"value": "",
									"description": "Optional. The desired language, consisting of an ISO 639-1 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning \"Spanish (Mexico)\". Provide this parameter if you want the category strings returned in a particular language. Note that, if locale is not supplied, or if the specified language is not available, the category strings returned will be in the Spotify default language (American English).",
									"disabled": true
								}
							]
						},
						"description": "## Description\nGet a single category used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab).\n\n## Response\nOn success, the HTTP status code in the response header is `200` OK and the response body contains a category object in JSON format. On error, the header status code is an error code and the response body contains an error object. Once you have retrieved the category, you can use Get a Category’s Playlists to drill down further."
					},
					"response": [
						{
							"name": "Get a Category",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWT}}",
										"description": "Required. A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/categories/:category_id?country=EG",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"categories",
										":category_id"
									],
									"query": [
										{
											"key": "country",
											"value": "EG",
											"description": "Optional. A country: an ISO 3166-1 alpha-2 country code. Provide this parameter to ensure that the category exists for a particular country."
										},
										{
											"key": "locale",
											"value": "",
											"description": "Optional. The desired language, consisting of an ISO 639-1 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning \"Spanish (Mexico)\". Provide this parameter if you want the category strings returned in a particular language. Note that, if locale is not supplied, or if the specified language is not available, the category strings returned will be in the Spotify default language (American English).",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "category_id",
											"value": "1",
											"description": "The Spotify category ID for the category."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "248"
								},
								{
									"key": "ETag",
									"value": "W/\"f8-azPTmolVlk4UXqhz8OdMaNN7/rc\""
								},
								{
									"key": "Date",
									"value": "Thu, 05 Mar 2020 19:10:07 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"href\": \"https://api.spotify.com/v1/browse/categories/party\",\n    \"icons\": [\n        {\n            \"height\": 274,\n            \"url\": \"https://datsnxq1rwndn.cloudfront.net/media/derived/party-274x274_73d1907a7371c3bb96a288390a96ee27_0_0_274_274.jpg\",\n            \"width\": 274\n        }\n    ],\n    \"id\": \"party\",\n    \"name\": \"Party\"\n}"
						}
					]
				},
				{
					"name": "Get a Category's Playlists",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{JWT}}",
								"description": "**Required.** A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user.",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/browse/categories/5e7a4ef8b823d58a048c1ca2/playlists",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"browse",
								"categories",
								"5e7a4ef8b823d58a048c1ca2",
								"playlists"
							]
						},
						"description": "## Description\nGet a list of Spotify playlists tagged with a particular category.\n\n## Response \nOn success, the HTTP status code in the response header is `200` OK and the response body contains an array of simplified playlist objects (wrapped in a paging object) in JSON format. On error, the header status code is an error code and the response body contains an error object.\n\nOnce you have retrieved the list, you can use Get a Playlist and Get a Playlist’s Tracks to drill down further."
					},
					"response": [
						{
							"name": "Get a Category's Playlists",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWT}}",
										"description": "**Required.** A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/categories/:category_id/playlists?country=EG&limit=2&offset=0",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"categories",
										":category_id",
										"playlists"
									],
									"query": [
										{
											"key": "country",
											"value": "EG",
											"description": "**Optional.** A country: an ISO 3166-1 alpha-2 country code.\n"
										},
										{
											"key": "limit",
											"value": "2",
											"description": "**Optional.** The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "**Optional.** The index of the first item to return. Default: 0 (the first object). Use with `limit` to get the next set of items."
										}
									],
									"variable": [
										{
											"key": "category_id",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2134"
								},
								{
									"key": "ETag",
									"value": "W/\"856-P7Zae2zKW04T2hLeJsooqBJe5uM\""
								},
								{
									"key": "Date",
									"value": "Thu, 05 Mar 2020 19:20:12 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"playlists\": {\n        \"href\": \"https://api.spotify.com/v1/browse/categories/party/playlists?country=BR&offset=0&limit=2\",\n        \"items\": [\n            {\n                \"collaborative\": false,\n                \"description\": \"Chegou o grande dia, aperte o play e partiu fim de semana!\",\n                \"external_urls\": {\n                    \"spotify\": \"https://open.spotify.com/playlist/37i9dQZF1DX8mBRYewE6or\"\n                },\n                \"href\": \"https://api.spotify.com/v1/playlists/37i9dQZF1DX8mBRYewE6or\",\n                \"id\": \"37i9dQZF1DX8mBRYewE6or\",\n                \"images\": [\n                    {\n                        \"height\": 300,\n                        \"url\": \"https://i.scdn.co/image/ab67706f00000002206a95fa5badbe1d33b65e14\",\n                        \"width\": 300\n                    }\n                ],\n                \"name\": \"Sexta\",\n                \"owner\": {\n                    \"display_name\": \"Spotify\",\n                    \"external_urls\": {\n                        \"spotify\": \"https://open.spotify.com/user/spotify\"\n                    },\n                    \"href\": \"https://api.spotify.com/v1/users/spotify\",\n                    \"id\": \"spotify\",\n                    \"type\": \"user\",\n                    \"uri\": \"spotify:user:spotify\"\n                },\n                \"primary_color\": null,\n                \"public\": null,\n                \"snapshot_id\": \"MTU3NDM1NjI0MiwwMDAwMDAwMGQ0MWQ4Y2Q5OGYwMGIyMDRlOTgwMDk5OGVjZjg0Mjdl\",\n                \"tracks\": {\n                    \"href\": \"https://api.spotify.com/v1/playlists/37i9dQZF1DX8mBRYewE6or/tracks\",\n                    \"total\": 62\n                },\n                \"type\": \"playlist\",\n                \"uri\": \"spotify:playlist:37i9dQZF1DX8mBRYewE6or\"\n            },\n            {\n                \"collaborative\": false,\n                \"description\": \"O batidão dos funks mais bombados pra agitar a pista do seu baile! [Conteúdo explícito]\",\n                \"external_urls\": {\n                    \"spotify\": \"https://open.spotify.com/playlist/37i9dQZF1DWWmaszSfZpom\"\n                },\n                \"href\": \"https://api.spotify.com/v1/playlists/37i9dQZF1DWWmaszSfZpom\",\n                \"id\": \"37i9dQZF1DWWmaszSfZpom\",\n                \"images\": [\n                    {\n                        \"height\": 300,\n                        \"url\": \"https://pl.scdn.co/images/pl/default/68fae5be6747e445c6bb34655c2bc2a77b9d1439\",\n                        \"width\": 300\n                    }\n                ],\n                \"name\": \"Segue o Baile\",\n                \"owner\": {\n                    \"display_name\": \"Spotify\",\n                    \"external_urls\": {\n                        \"spotify\": \"https://open.spotify.com/user/spotify\"\n                    },\n                    \"href\": \"https://api.spotify.com/v1/users/spotify\",\n                    \"id\": \"spotify\",\n                    \"type\": \"user\",\n                    \"uri\": \"spotify:user:spotify\"\n                },\n                \"primary_color\": null,\n                \"public\": null,\n                \"snapshot_id\": \"MTU3MzEyOTM2OCwwMDAwMDA5MDAwMDAwMTZlNDVkMTM0MmMwMDAwMDE2ZGNjMTY1NTFh\",\n                \"tracks\": {\n                    \"href\": \"https://api.spotify.com/v1/playlists/37i9dQZF1DWWmaszSfZpom/tracks\",\n                    \"total\": 67\n                },\n                \"type\": \"playlist\",\n                \"uri\": \"spotify:playlist:37i9dQZF1DWWmaszSfZpom\"\n            }\n        ],\n        \"limit\": 2,\n        \"next\": \"https://api.spotify.com/v1/browse/categories/party/playlists?country=BR&offset=2&limit=2\",\n        \"offset\": 0,\n        \"previous\": null,\n        \"total\": 37\n    }\n}"
						}
					]
				},
				{
					"name": "Get a List of Categories [NOT DONE]",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{JWT}}",
								"description": "**Required.** A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user.",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/browse/categories?limit=1&offset=3",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"browse",
								"categories"
							],
							"query": [
								{
									"key": "country",
									"value": "EG",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "offset",
									"value": "3"
								}
							]
						},
						"description": "## Description\nGet a list of categories used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab).\n\n## Response\nOn success, the HTTP status code in the response header is `200` OK and the response body contains an object with a categories field, with an array of category objects (wrapped in a paging object) in JSON format. On error, the header status code is an error code and the response body contains an error object. \n\nOnce you have retrieved the list, you can use Get a Category to drill down further."
					},
					"response": [
						{
							"name": "Get a List of Categories ",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWT}}",
										"description": "**Required.** A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/browse/categories?country=EG&limit=20&offset=0",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"browse",
										"categories"
									],
									"query": [
										{
											"key": "country",
											"value": "EG",
											"description": "**Optional.** A country: an ISO 3166-1 alpha-2 country code. Provide this parameter if you want to narrow the list of returned categories to those relevant to a particular country. If omitted, the returned items will be globally relevant."
										},
										{
											"key": "limit",
											"value": "20",
											"description": "**Optional.** The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "**Optional.** The index of the first item to return. Default: 0 (the first object). Use with `limit` to get the next set of items."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "1455"
								},
								{
									"key": "ETag",
									"value": "W/\"5af-z6qfb8a/xFZ1dxngHh8IQUqZ8jA\""
								},
								{
									"key": "Date",
									"value": "Thu, 05 Mar 2020 19:28:04 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"categories\": {\n        \"href\": \"https://api.spotify.com/v1/browse/categories?offset=0&limit=20\",\n        \"items\": [\n            {\n                \"href\": \"https://api.spotify.com/v1/browse/categories/toplists\",\n                \"icons\": [\n                    {\n                        \"height\": 275,\n                        \"url\": \"https://datsnxq1rwndn.cloudfront.net/media/derived/toplists_11160599e6a04ac5d6f2757f5511778f_0_0_275_275.jpg\",\n                        \"width\": 275\n                    }\n                ],\n                \"id\": \"toplists\",\n                \"name\": \"Top Lists\"\n            },\n            {\n                \"href\": \"https://api.spotify.com/v1/browse/categories/mood\",\n                \"icons\": [\n                    {\n                        \"height\": 274,\n                        \"url\": \"https://datsnxq1rwndn.cloudfront.net/media/original/mood-274x274_976986a31ac8c49794cbdc7246fd5ad7_274x274.jpg\",\n                        \"width\": 274\n                    }\n                ],\n                \"id\": \"mood\",\n                \"name\": \"Mood\"\n            },\n            {\n                \"href\": \"https://api.spotify.com/v1/browse/categories/party\",\n                \"icons\": [\n                    {\n                        \"height\": 274,\n                        \"url\": \"https://datsnxq1rwndn.cloudfront.net/media/derived/party-274x274_73d1907a7371c3bb96a288390a96ee27_0_0_274_274.jpg\",\n                        \"width\": 274\n                    }\n                ],\n                \"id\": \"party\",\n                \"name\": \"Party\"\n            },\n            {\n                \"href\": \"https://api.spotify.com/v1/browse/categories/pop\",\n                \"icons\": [\n                    {\n                        \"height\": 274,\n                        \"url\": \"https://datsnxq1rwndn.cloudfront.net/media/derived/pop-274x274_447148649685019f5e2a03a39e78ba52_0_0_274_274.jpg\",\n                        \"width\": 274\n                    }\n                ],\n                \"id\": \"pop\",\n                \"name\": \"Pop\"\n            },\n            {\n                \"href\": \"https://api.spotify.com/v1/browse/categories/workout\",\n                \"icons\": [\n                    {\n                        \"height\": 275,\n                        \"url\": \"https://datsnxq1rwndn.cloudfront.net/media/derived/workout_856581c1c545a5305e49a3cd8be804a0_0_0_275_275.jpg\",\n                        \"width\": 275\n                    }\n                ],\n                \"id\": \"workout\",\n                \"name\": \"Workout\"\n            }\n        ],\n        \"limit\": 20,\n        \"next\": \"https://api.spotify.com/v1/browse/categories?offset=20&limit=20\",\n        \"offset\": 0,\n        \"previous\": null,\n        \"total\": 31\n    }\n}"
						}
					]
				},
				{
					"name": "Get a List of Featured Playlists [NOT DONE]",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{JWT}}",
								"description": "**Required.** A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user.",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/browse/featured-playlists?country=EG&limit=20&offset=0&timestamp=",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"browse",
								"featured-playlists"
							],
							"query": [
								{
									"key": "country",
									"value": "EG",
									"description": "**Optional.** A country: an ISO 3166-1 alpha-2 country code. Provide this parameter if you want to narrow the list of returned categories to those relevant to a particular country. If omitted, the returned items will be globally relevant."
								},
								{
									"key": "limit",
									"value": "20",
									"description": "**Optional.** The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\n"
								},
								{
									"key": "offset",
									"value": "0",
									"description": "**Optional.** The index of the first item to return. Default: 0 (the first object). Use with `limit` to get the next set of items."
								},
								{
									"key": "timestamp",
									"value": "",
									"description": "**Optional.** A timestamp in ISO 8601 format: yyyy-MM-ddTHH:mm:ss. Use this parameter to specify the user’s local time to get results tailored for that specific date and time in the day. If not provided, the response defaults to the current UTC time. Example: “2014-10-23T09:00:00” for a user whose local time is 9AM. If there were no featured playlists (or there is no data) at the specified time, the response will revert to the current UTC time."
								}
							]
						},
						"description": "## Description\nGet a list of Spotify featured playlists (shown, for example, on a Spotify player’s ‘Browse’ tab).\n\n## Response \nOn success, the HTTP status code in the response header is `200` OK and the response body contains a message and a playlists object. The playlists object contains an array of simplified playlist objects (wrapped in a paging object) in JSON format. On error, the header status code is an error code and the response body contains an error object. \n\nOnce you have retrieved the list of playlist objects, you can use Get a Playlist and Get a Playlist’s Tracks to drill down further."
					},
					"response": [
						{
							"name": "Get a List of Featured Playlists",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWT}}",
										"description": "**Required.** A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/browse/featured-playlists?country=EG&limit=20&offset=0&timestamp",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"browse",
										"featured-playlists"
									],
									"query": [
										{
											"key": "country",
											"value": "EG",
											"description": "**Optional.** A country: an ISO 3166-1 alpha-2 country code. Provide this parameter if you want to narrow the list of returned categories to those relevant to a particular country. If omitted, the returned items will be globally relevant."
										},
										{
											"key": "limit",
											"value": "20",
											"description": "**Optional.** The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "**Optional.** The index of the first item to return. Default: 0 (the first object). Use with `limit` to get the next set of items."
										},
										{
											"key": "timestamp",
											"value": null,
											"description": "**Optional.** A timestamp in ISO 8601 format: yyyy-MM-ddTHH:mm:ss. Use this parameter to specify the user’s local time to get results tailored for that specific date and time in the day. If not provided, the response defaults to the current UTC time. Example: “2014-10-23T09:00:00” for a user whose local time is 9AM. If there were no featured playlists (or there is no data) at the specified time, the response will revert to the current UTC time."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2313"
								},
								{
									"key": "ETag",
									"value": "W/\"909-MlBcXfryiF0ia0FD8zWrwloBBmk\""
								},
								{
									"key": "Date",
									"value": "Thu, 05 Mar 2020 19:34:08 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Monday morning music, coming right up!\",\n    \"playlists\": {\n        \"href\": \"https://api.spotify.com/v1/browse/featured-playlists?country=SE&timestamp=2015-05-18T06:44:32&offset=0&limit=2\",\n        \"items\": [\n            {\n                \"collaborative\": false,\n                \"description\": \"Relaxed deep house to slowly help you get back on your feet and ready yourself for a productive week.\",\n                \"external_urls\": {\n                    \"spotify\": \"http://open.spotify.com/user/spotify/playlist/6ftJBzU2LLQcaKefMi7ee7\"\n                },\n                \"href\": \"https://api.spotify.com/v1/users/spotify/playlists/6ftJBzU2LLQcaKefMi7ee7\",\n                \"id\": \"6ftJBzU2LLQcaKefMi7ee7\",\n                \"images\": [\n                    {\n                        \"height\": 300,\n                        \"url\": \"https://i.scdn.co/image/7bd33c65ebd1e45975bbcbbf513bafe272f033c7\",\n                        \"width\": 300\n                    }\n                ],\n                \"name\": \"Monday Morning Mood\",\n                \"owner\": {\n                    \"external_urls\": {\n                        \"spotify\": \"http://open.spotify.com/user/spotify\"\n                    },\n                    \"href\": \"https://api.spotify.com/v1/users/spotify\",\n                    \"id\": \"spotify\",\n                    \"type\": \"user\",\n                    \"uri\": \"spotify:user:spotify\"\n                },\n                \"public\": null,\n                \"snapshot_id\": \"WwGvSIVUkUvGvqjgj/bQHlRycYmJ2TkoIxYfoalWlmIZT6TvsgvGMgtQ2dGbkrAW\",\n                \"tracks\": {\n                    \"href\": \"https://api.spotify.com/v1/users/spotify/playlists/6ftJBzU2LLQcaKefMi7ee7/tracks\",\n                    \"total\": 245\n                },\n                \"type\": \"playlist\",\n                \"uri\": \"spotify:user:spotify:playlist:6ftJBzU2LLQcaKefMi7ee7\"\n            },\n            {\n                \"collaborative\": false,\n                \"description\": \"Du kommer studsa ur sängen med den här spellistan.\",\n                \"external_urls\": {\n                    \"spotify\": \"http://open.spotify.com/user/spotify__sverige/playlist/4uOEx4OUrkoGNZoIlWMUbO\"\n                },\n                \"href\": \"https://api.spotify.com/v1/users/spotify__sverige/playlists/4uOEx4OUrkoGNZoIlWMUbO\",\n                \"id\": \"4uOEx4OUrkoGNZoIlWMUbO\",\n                \"images\": [\n                    {\n                        \"height\": 300,\n                        \"url\": \"https://i.scdn.co/image/24aa1d1b491dd529b9c03392f350740ed73438d8\",\n                        \"width\": 300\n                    }\n                ],\n                \"name\": \"Upp och hoppa!\",\n                \"owner\": {\n                    \"external_urls\": {\n                        \"spotify\": \"http://open.spotify.com/user/spotify__sverige\"\n                    },\n                    \"href\": \"https://api.spotify.com/v1/users/spotify__sverige\",\n                    \"id\": \"spotify__sverige\",\n                    \"type\": \"user\",\n                    \"uri\": \"spotify:user:spotify__sverige\"\n                },\n                \"public\": null,\n                \"snapshot_id\": \"0j9Rcbt2KtCXEXKtKy/tnSL5r4byjDBOIVY1dn4S6GV73EEUgNuK2hU+QyDuNnXz\",\n                \"tracks\": {\n                    \"href\": \"https://api.spotify.com/v1/users/spotify__sverige/playlists/4uOEx4OUrkoGNZoIlWMUbO/tracks\",\n                    \"total\": 38\n                },\n                \"type\": \"playlist\",\n                \"uri\": \"spotify:user:spotify__sverige:playlist:4uOEx4OUrkoGNZoIlWMUbO\"\n            }\n        ],\n        \"limit\": 2,\n        \"next\": \"https://api.spotify.com/v1/browse/featured-playlists?country=SE&timestamp=2015-05-18T06:44:32&offset=2&limit=2\",\n        \"offset\": 0,\n        \"previous\": null,\n        \"total\": 12\n    }\n}"
						}
					]
				},
				{
					"name": "Get a List of New Releases [NOT DONE]",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{JWT}}",
								"description": "**Required.** A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user.",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/browse/new-releases?country=EG&limit=20&offset=0",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"browse",
								"new-releases"
							],
							"query": [
								{
									"key": "country",
									"value": "EG",
									"description": "**Optional.** A country: an ISO 3166-1 alpha-2 country code. Provide this parameter if you want to narrow the list of returned categories to those relevant to a particular country. If omitted, the returned items will be globally relevant."
								},
								{
									"key": "limit",
									"value": "20",
									"description": "**Optional.** The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\n"
								},
								{
									"key": "offset",
									"value": "0",
									"description": "**Optional.** The index of the first item to return. Default: 0 (the first object). Use with `limit` to get the next set of items."
								},
								{
									"key": "timestamp",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "## Description\nGet a list of new album releases featured in Spotify (shown, for example, on a Spotify player’s “Browse” tab).\n\n## Response\n On success, the HTTP status code in the response header is 200 OK and the response body contains a message and analbums object. The albums object contains an array of simplified album objects (wrapped in a paging object) in JSON format. On error, the header status code is an error code and the response body contains an error object. \n \n Once you have retrieved the list, you can use Get an Album’s Tracks to drill down further. \n \n The results are returned in an order reflected within the Spotify clients, and therefore may not be ordered by date."
					},
					"response": [
						{
							"name": "Get a List of New Releases",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWT}}",
										"description": "**Required.** A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/browse/new-releases?country=EG&limit=20&offset=0",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"browse",
										"new-releases"
									],
									"query": [
										{
											"key": "country",
											"value": "EG",
											"description": "**Optional.** A country: an ISO 3166-1 alpha-2 country code. Provide this parameter if you want to narrow the list of returned categories to those relevant to a particular country. If omitted, the returned items will be globally relevant."
										},
										{
											"key": "limit",
											"value": "20",
											"description": "**Optional.** The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "**Optional.** The index of the first item to return. Default: 0 (the first object). Use with `limit` to get the next set of items."
										},
										{
											"key": "timestamp",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "1984"
								},
								{
									"key": "ETag",
									"value": "W/\"7c0-pdByzuBr+D4tPFKuWvVxZHB6BmI\""
								},
								{
									"key": "Date",
									"value": "Thu, 05 Mar 2020 19:41:17 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"albums\": {\n        \"href\": \"https://api.spotify.com/v1/browse/new-releases?country=SE&offset=0&limit=20\",\n        \"items\": [\n            {\n                \"album_type\": \"single\",\n                \"artists\": [\n                    {\n                        \"external_urls\": {\n                            \"spotify\": \"https://open.spotify.com/artist/2RdwBSPQiwcmiDo9kixcl8\"\n                        },\n                        \"href\": \"https://api.spotify.com/v1/artists/2RdwBSPQiwcmiDo9kixcl8\",\n                        \"id\": \"2RdwBSPQiwcmiDo9kixcl8\",\n                        \"name\": \"Pharrell Williams\",\n                        \"type\": \"artist\",\n                        \"uri\": \"spotify:artist:2RdwBSPQiwcmiDo9kixcl8\"\n                    }\n                ],\n                \"external_urls\": {\n                    \"spotify\": \"https://open.spotify.com/album/5ZX4m5aVSmWQ5iHAPQpT71\"\n                },\n                \"href\": \"https://api.spotify.com/v1/albums/5ZX4m5aVSmWQ5iHAPQpT71\",\n                \"id\": \"5ZX4m5aVSmWQ5iHAPQpT71\",\n                \"images\": [\n                    {\n                        \"height\": 640,\n                        \"url\": \"https://i.scdn.co/image/e6b635ebe3ef4ba22492f5698a7b5d417f78b88a\",\n                        \"width\": 640\n                    },\n                    {\n                        \"height\": 300,\n                        \"url\": \"https://i.scdn.co/image/92ae5b0fe64870c09004dd2e745a4fb1bf7de39d\",\n                        \"width\": 300\n                    },\n                    {\n                        \"height\": 64,\n                        \"url\": \"https://i.scdn.co/image/8a7ab6fc2c9f678308ba0f694ecd5718dc6bc930\",\n                        \"width\": 64\n                    }\n                ],\n                \"name\": \"Runnin'\",\n                \"type\": \"album\",\n                \"uri\": \"spotify:album:5ZX4m5aVSmWQ5iHAPQpT71\"\n            },\n            {\n                \"album_type\": \"single\",\n                \"artists\": [\n                    {\n                        \"external_urls\": {\n                            \"spotify\": \"https://open.spotify.com/artist/3TVXtAsR1Inumwj472S9r4\"\n                        },\n                        \"href\": \"https://api.spotify.com/v1/artists/3TVXtAsR1Inumwj472S9r4\",\n                        \"id\": \"3TVXtAsR1Inumwj472S9r4\",\n                        \"name\": \"Drake\",\n                        \"type\": \"artist\",\n                        \"uri\": \"spotify:artist:3TVXtAsR1Inumwj472S9r4\"\n                    }\n                ],\n                \"external_urls\": {\n                    \"spotify\": \"https://open.spotify.com/album/0geTzdk2InlqIoB16fW9Nd\"\n                },\n                \"href\": \"https://api.spotify.com/v1/albums/0geTzdk2InlqIoB16fW9Nd\",\n                \"id\": \"0geTzdk2InlqIoB16fW9Nd\",\n                \"images\": [\n                    {\n                        \"height\": 640,\n                        \"url\": \"https://i.scdn.co/image/d40e9c3d22bde2fbdb2ecc03cccd7a0e77f42e4c\",\n                        \"width\": 640\n                    },\n                    {\n                        \"height\": 300,\n                        \"url\": \"https://i.scdn.co/image/dff06a3375f6d9b32ecb081eb9a60bbafecb5731\",\n                        \"width\": 300\n                    },\n                    {\n                        \"height\": 64,\n                        \"url\": \"https://i.scdn.co/image/808a02bd7fc59b0652c9df9f68675edbffe07a79\",\n                        \"width\": 64\n                    }\n                ],\n                \"name\": \"Sneakin’\",\n                \"type\": \"album\",\n                \"uri\": \"spotify:album:0geTzdk2InlqIoB16fW9Nd\"\n            }\n        ],\n        \"limit\": 20,\n        \"next\": \"https://api.spotify.com/v1/browse/new-releases?country=SE&offset=20&limit=20\",\n        \"offset\": 0,\n        \"previous\": null,\n        \"total\": 500\n    }\n}"
						}
					]
				},
				{
					"name": "Get Recommendations Based on Seeds [NOT DONE]",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{JWT}}",
								"description": "**Required.** A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user.",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/browse/recommendations?limit=20&seed_artists=&seed_genres=&seed_tracks=",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"browse",
								"recommendations"
							],
							"query": [
								{
									"key": "limit",
									"value": "20",
									"description": "**Optional.** The target size of the list of recommended tracks. For seeds with unusually small pools or when highly restrictive filtering is applied, it may be impossible to generate the requested number of recommended tracks. Debugging information for such cases is available in the response. Default: 20. Minimum: 1. Maximum: 100.\n"
								},
								{
									"key": "seed_artists",
									"value": "",
									"description": "A comma separated list of Spotify IDs for seed artists. Up to 5 seed values may be provided in any combination of `seed_artists`, `seed_tracks` and `seed_genres`.\n"
								},
								{
									"key": "seed_genres",
									"value": "",
									"description": "A comma separated list of any genres in the set of available genre seeds. Up to 5 seed values may be provided in any combination of `seed_artists`, `seed_tracks` and `seed_genres`.\n"
								},
								{
									"key": "seed_tracks",
									"value": "",
									"description": "A comma separated list of Spotify IDs for a seed track. Up to 5 seed values may be provided in any combination of `seed_artists`, `seed_tracks` and `seed_genres`."
								}
							]
						},
						"description": "## Description\nCreate a playlist-style listening experience based on seed artists, tracks and genres.\n\nRecommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details. \n\nFor artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks.\n\n## Response\nOn success, the HTTP status code in the response header is `200` OK and the response body contains a recommendations response object in JSON format."
					},
					"response": [
						{
							"name": "Get Recommendations Based on Seeds",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWT}}",
										"description": "**Required.** A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/browse/recommendations?limit=20&seed_artists&seed_genres&seed_tracks",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"browse",
										"recommendations"
									],
									"query": [
										{
											"key": "limit",
											"value": "20",
											"description": "**Optional.** The target size of the list of recommended tracks. For seeds with unusually small pools or when highly restrictive filtering is applied, it may be impossible to generate the requested number of recommended tracks. Debugging information for such cases is available in the response. Default: 20. Minimum: 1. Maximum: 100.\n"
										},
										{
											"key": "seed_artists",
											"value": null,
											"description": "A comma separated list of Spotify IDs for seed artists. Up to 5 seed values may be provided in any combination of `seed_artists`, `seed_tracks` and `seed_genres`.\n"
										},
										{
											"key": "seed_genres",
											"value": null,
											"description": "A comma separated list of any genres in the set of available genre seeds. Up to 5 seed values may be provided in any combination of `seed_artists`, `seed_tracks` and `seed_genres`.\n"
										},
										{
											"key": "seed_tracks",
											"value": null,
											"description": "A comma separated list of Spotify IDs for a seed track. Up to 5 seed values may be provided in any combination of `seed_artists`, `seed_tracks` and `seed_genres`."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2098"
								},
								{
									"key": "ETag",
									"value": "W/\"832-tgXS+OXWhO8bmgsBJxnEQ/aVYsc\""
								},
								{
									"key": "Date",
									"value": "Thu, 05 Mar 2020 19:53:06 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"tracks\": [\n        {\n            \"artists\": [\n                {\n                    \"external_urls\": {\n                        \"spotify\": \"https://open.spotify.com/artist/134GdR5tUtxJrf8cpsfpyY\"\n                    },\n                    \"href\": \"https://api.spotify.com/v1/artists/134GdR5tUtxJrf8cpsfpyY\",\n                    \"id\": \"134GdR5tUtxJrf8cpsfpyY\",\n                    \"name\": \"Elliphant\",\n                    \"type\": \"artist\",\n                    \"uri\": \"spotify:artist:134GdR5tUtxJrf8cpsfpyY\"\n                },\n                {\n                    \"external_urls\": {\n                        \"spotify\": \"https://open.spotify.com/artist/1D2oK3cJRq97OXDzu77BFR\"\n                    },\n                    \"href\": \"https://api.spotify.com/v1/artists/1D2oK3cJRq97OXDzu77BFR\",\n                    \"id\": \"1D2oK3cJRq97OXDzu77BFR\",\n                    \"name\": \"Ras Fraser Jr.\",\n                    \"type\": \"artist\",\n                    \"uri\": \"spotify:artist:1D2oK3cJRq97OXDzu77BFR\"\n                }\n            ],\n            \"disc_number\": 1,\n            \"duration_ms\": 199133,\n            \"explicit\": false,\n            \"external_urls\": {\n                \"spotify\": \"https://open.spotify.com/track/1TKYPzH66GwsqyJFKFkBHQ\"\n            },\n            \"href\": \"https://api.spotify.com/v1/tracks/1TKYPzH66GwsqyJFKFkBHQ\",\n            \"id\": \"1TKYPzH66GwsqyJFKFkBHQ\",\n            \"is_playable\": true,\n            \"name\": \"Music Is Life\",\n            \"preview_url\": \"https://p.scdn.co/mp3-preview/546099103387186dfe16743a33edd77e52cec738\",\n            \"track_number\": 1,\n            \"type\": \"track\",\n            \"uri\": \"spotify:track:1TKYPzH66GwsqyJFKFkBHQ\"\n        },\n        {\n            \"artists\": [\n                {\n                    \"external_urls\": {\n                        \"spotify\": \"https://open.spotify.com/artist/1VBflYyxBhnDc9uVib98rw\"\n                    },\n                    \"href\": \"https://api.spotify.com/v1/artists/1VBflYyxBhnDc9uVib98rw\",\n                    \"id\": \"1VBflYyxBhnDc9uVib98rw\",\n                    \"name\": \"Icona Pop\",\n                    \"type\": \"artist\",\n                    \"uri\": \"spotify:artist:1VBflYyxBhnDc9uVib98rw\"\n                }\n            ],\n            \"disc_number\": 1,\n            \"duration_ms\": 187026,\n            \"explicit\": false,\n            \"external_urls\": {\n                \"spotify\": \"https://open.spotify.com/track/15iosIuxC3C53BgsM5Uggs\"\n            },\n            \"href\": \"https://api.spotify.com/v1/tracks/15iosIuxC3C53BgsM5Uggs\",\n            \"id\": \"15iosIuxC3C53BgsM5Uggs\",\n            \"is_playable\": true,\n            \"name\": \"All Night\",\n            \"preview_url\": \"https://p.scdn.co/mp3-preview/9ee589fa7fe4e96bad3483c20b3405fb59776424\",\n            \"track_number\": 2,\n            \"type\": \"track\",\n            \"uri\": \"spotify:track:15iosIuxC3C53BgsM5Uggs\"\n        }\n    ],\n    \"seeds\": [\n        {\n            \"initialPoolSize\": 500,\n            \"afterFilteringSize\": 380,\n            \"afterRelinkingSize\": 365,\n            \"href\": \"https://api.spotify.com/v1/artists/4NHQUGzhtTLFvgF5SZesLK\",\n            \"id\": \"4NHQUGzhtTLFvgF5SZesLK\",\n            \"type\": \"artist\"\n        },\n        {\n            \"initialPoolSize\": 250,\n            \"afterFilteringSize\": 172,\n            \"afterRelinkingSize\": 144,\n            \"href\": \"https://api.spotify.com/v1/tracks/0c6xIDDpzE81m2q797ordA\",\n            \"id\": \"0c6xIDDpzE81m2q797ordA\",\n            \"type\": \"track\"\n        }\n    ]\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Follow",
			"item": [
				{
					"name": "Check if Current User Follows Artists or Users",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{JWT}}",
								"description": "**Required.** A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user.",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/following/contains?ids=5e6f4b841e8f2f2ac80acdfb,5e6fe9e64f934f4732d63ab5,5e6f6ef67ccffb4b301f83d2,5e6f6ef67ccffb4b",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"following",
								"contains"
							],
							"query": [
								{
									"key": "type",
									"value": "user",
									"description": "**Optional**. The ID type: either `artist` or `user`.",
									"disabled": true
								},
								{
									"key": "ids",
									"value": "5e6f4b841e8f2f2ac80acdfb,5e6fe9e64f934f4732d63ab5,5e6f6ef67ccffb4b301f83d2,5e6f6ef67ccffb4b"
								}
							]
						},
						"description": "## Description\nCheck to see if the current user is following one or more artists or other Spotify users.\n\n## Response\nOn success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array of `true` or `false` values, in the same order in which the ids were specified. On error, the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Check if Current User Follows Artists or Users [ ✅ DONE ]",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWT}}",
										"description": "**Required.** A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/me/following/contains?ids=5e6f4b841e8f2f2ac80acdfb,5e6fe9e64f934f4732d63ab5,5e6f6ef67ccffb4b301f83d2,5e6f6ef67ccffb4b",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"following",
										"contains"
									],
									"query": [
										{
											"key": "type",
											"value": "user",
											"description": "**Optional**. The ID type: either `artist` or `user`.",
											"disabled": true
										},
										{
											"key": "ids",
											"value": "5e6f4b841e8f2f2ac80acdfb,5e6fe9e64f934f4732d63ab5,5e6f6ef67ccffb4b301f83d2,5e6f6ef67ccffb4b"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "94"
								},
								{
									"key": "Date",
									"value": "Fri, 27 Mar 2020 17:50:03 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1585334873"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "23"
								},
								{
									"key": "ETag",
									"value": "W/\"17-nJIf3px8QybzVoyjBhbkwcw9SpA\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    true,\n    true,\n    false,\n    false\n]"
						}
					]
				},
				{
					"name": "Check if Users Follow a Playlist ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{JWT}}",
								"description": "**Required.** A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user.",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/playlists/5e6f7286e69dff5b381c431c/followers/contains?ids=5e70d3dbc137bb382cc41cba",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"playlists",
								"5e6f7286e69dff5b381c431c",
								"followers",
								"contains"
							],
							"query": [
								{
									"key": "ids",
									"value": "5e70d3dbc137bb382cc41cba",
									"description": "**Required** comma-separated list of Spotify User IDs ; the ids of the users that you want to check to see if they follow the playlist. Maximum: 5 ids. "
								}
							]
						},
						"description": "## Description\nCheck to see if one or more Spotify users are following a specified playlist.\n\n## Response\nOn success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array of `true` or `false` values, in the same order in which the ids were specified. On error, the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Check if Users Follow a Playlist",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWT}}",
										"description": "**Required.** A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/playlists/:playlist_id/followers/contains?ids=123,456",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"playlists",
										":playlist_id",
										"followers",
										"contains"
									],
									"query": [
										{
											"key": "ids",
											"value": "123,456",
											"description": "**Required** comma-separated list of Spotify User IDs ; the ids of the users that you want to check to see if they follow the playlist. Maximum: 5 ids. "
										}
									],
									"variable": [
										{
											"key": "playlist_id",
											"value": "1",
											"description": "The Spotify ID of the playlist."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "12"
								},
								{
									"key": "ETag",
									"value": "W/\"c-L/azHS94l9YtOYJ8D2PfXJ9IGec\""
								},
								{
									"key": "Date",
									"value": "Thu, 05 Mar 2020 20:16:37 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    true,\n    false\n]"
						}
					]
				},
				{
					"name": "Follow Artists or Users",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{JWT}}",
								"description": "**Required.** A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user.",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"description": "**Required**. The content type of the request body: application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"ids\":[\"5e6f4b841e8f2f2ac80acdfb\",\"5e6f6ef67ccffb4b301f83d2\", \"5e6fc6ebb8715b3f1dc40b80\", \"5e6fe9e64f934f4732d63ab5\"]\n}",
							"options": {}
						},
						"url": {
							"raw": "{{URL}}api/v1/me/following?type=artist",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"following"
							],
							"query": [
								{
									"key": "type",
									"value": "artist",
									"description": "**Optional** type of the ids to be followed \nex: if type=artist the api will follow the ids that matches artist accounts only\n"
								}
							]
						},
						"description": "## Description\nAdd the current user as a follower of one or more artists or other Spotify users.\n\n## Response\nOn success, the HTTP status code in the response header is `204` No Content and the response body is empty. On error, the header status code is an error code and the response body contains an error object. "
					},
					"response": []
				},
				{
					"name": "Follow a Playlist",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer {{JWT}}",
								"description": "**Required.** A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user.",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": "**Required**. The content type of the request body: application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {}
						},
						"url": {
							"raw": "{{URL}}api/v1/playlists/5e71dd4d7e4ff73544999691/followers",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"playlists",
								"5e71dd4d7e4ff73544999691",
								"followers"
							]
						},
						"description": "## Description\nAdd the current user as a follower of a playlist.\n\n## Response\nOn success, the HTTP status code in the response header is `200` OK and the response body is empty. On error, the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Follow a Playlist  [ ✅DONE ]",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{JWT}}",
										"description": "**Required.** A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user.",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": "**Required**. The content type of the request body: application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}api/v1/playlists/5e71dd4d7e4ff73544999691/followers",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"playlists",
										"5e71dd4d7e4ff73544999691",
										"followers"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "95"
								},
								{
									"key": "Date",
									"value": "Fri, 27 Mar 2020 18:44:42 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1585338228"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "32"
								},
								{
									"key": "ETag",
									"value": "W/\"20-ReiJzdtTxVV97orxUQVCR1wda/c\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "\"Playlist followed successfully\""
						}
					]
				},
				{
					"name": "Get User's Followed Users",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{JWT}}",
								"description": "**Required.** A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user.",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/following?type=artist&limit=20",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"following"
							],
							"query": [
								{
									"key": "type",
									"value": "artist",
									"description": "**Required.** The ID type: currently only `artist` is supported."
								},
								{
									"key": "limit",
									"value": "20",
									"description": "**Optional.** The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50."
								}
							]
						},
						"description": "## Description\n Get the current user’s followed Users.\n \n ## Response\n On success, the HTTP status code in the response header is `200` OK and the response body contains an `artists` object. The artists object in turn contains a cursor-based paging object of Artists. On error, the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Get User's Followed Artists [ ✅ DONE ]",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWT}}",
										"description": "**Required.** A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/me/following?type=artist&limit=20",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"following"
									],
									"query": [
										{
											"key": "type",
											"value": "artist",
											"description": "**Required.** The ID type: currently only `artist` is supported."
										},
										{
											"key": "limit",
											"value": "20",
											"description": "**Optional.** The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "99"
								},
								{
									"key": "Date",
									"value": "Fri, 27 Mar 2020 18:05:25 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1585335905"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "1585"
								},
								{
									"key": "ETag",
									"value": "W/\"631-47wFAQZVNuJvUt52+Eb3vJuEGIY\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"followedIds\": [\n        \"5e6f4b841e8f2f2ac80acdfb\",\n        \"5e6fe9e64f934f4732d63ab5\"\n    ],\n    \"followedUsers\": [\n        {\n            \"type\": \"artist\",\n            \"product\": \"free\",\n            \"image\": null,\n            \"currentlyPlaying\": {\n                \"track\": null,\n                \"timestamp\": null,\n                \"repeat_state\": false,\n                \"shuffle_state\": false,\n                \"volume_percent\": 60,\n                \"is_playing\": false,\n                \"progress_ms\": 0\n            },\n            \"followers\": 24,\n            \"following\": [],\n            \"_id\": \"5e6f4b841e8f2f2ac80acdfb\",\n            \"name\": \"Walid\",\n            \"email\": \"walid@spotify.com\",\n            \"gender\": \"m\",\n            \"birthdate\": \"1998-09-25T00:00:00.000Z\",\n            \"country\": \"EG\",\n            \"devices\": [],\n            \"__v\": 0,\n            \"followedPlaylists\": [],\n            \"uri\": \"spotify:user:5e6f4b841e8f2f2ac80acdfb\",\n            \"id\": \"5e6f4b841e8f2f2ac80acdfb\"\n        },\n        {\n            \"type\": \"artist\",\n            \"product\": \"free\",\n            \"image\": null,\n            \"currentlyPlaying\": {\n                \"track\": null,\n                \"timestamp\": null,\n                \"repeat_state\": false,\n                \"shuffle_state\": false,\n                \"volume_percent\": 60,\n                \"is_playing\": false,\n                \"progress_ms\": 0\n            },\n            \"followers\": 2,\n            \"following\": [\n                \"5e6f4b841e8f2f2ac80acdfb\",\n                \"5e6fc6ebb8715b3f1dc40b80\",\n                \"5e6f6ef67ccffb4b301f83d2\"\n            ],\n            \"_id\": \"5e6fe9e64f934f4732d63ab5\",\n            \"name\": \"Nasser\",\n            \"email\": \"hi3@nasser.com\",\n            \"gender\": \"m\",\n            \"birthdate\": \"1999-05-17T00:00:00.000Z\",\n            \"country\": \"EG\",\n            \"devices\": [],\n            \"__v\": 17,\n            \"followedPlaylists\": [\n                {\n                    \"_id\": \"5e7116862816985e382adb5b\",\n                    \"playlist\": \"5e6f7286e69dff5b381c431c\",\n                    \"public\": true\n                },\n                {\n                    \"_id\": \"5e7116cd2816985e382adb5c\",\n                    \"playlist\": \"5e6f72abe69dff5b381c431d\",\n                    \"public\": true\n                },\n                {\n                    \"_id\": \"5e7117232c86d35e54d396dd\",\n                    \"playlist\": \"5e6f8c1b87760d13485a4e6a\",\n                    \"public\": true\n                },\n                {\n                    \"_id\": \"5e711892bfb8735ed2e8dd89\",\n                    \"playlist\": \"5e6f8c2987760d13485a4e6b\",\n                    \"public\": true\n                },\n                {\n                    \"_id\": \"5e7118a0bfb8735ed2e8dd8a\",\n                    \"playlist\": \"5e6f904b644a444bb438e708\",\n                    \"public\": true\n                }\n            ],\n            \"uri\": \"spotify:user:5e6fe9e64f934f4732d63ab5\",\n            \"id\": \"5e6fe9e64f934f4732d63ab5\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Unfollow Artists or Users",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{JWT}}",
								"description": "**Required.** A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user.",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"ids\" : [\"5e6fe9e64f934f4732d63ab5\"]\n}",
							"options": {}
						},
						"url": {
							"raw": "{{URL}}api/v1/me/following?type=artist",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"following"
							],
							"query": [
								{
									"key": "ids",
									"value": "74ASZWbe4lXaubB36ztrGX,08td7MxkoHQkXnWAYD8d6Q",
									"description": "**Optional**. A comma-separated list of the artist or the user Spotify IDs. For example: `ids=74ASZWbe4lXaubB36ztrGX,08td7MxkoHQkXnWAYD8d6Q`. A maximum of 50 IDs can be sent in one request.",
									"disabled": true
								},
								{
									"key": "type",
									"value": "artist"
								}
							]
						},
						"description": "## Description\nRemove the current user as a follower of one or more artists or other Spotify users.\n\n## Response\nOn success, the HTTP status code in the response header is `204` No Content and the response body is empty. On error, the header status code is an error code and the response body contains an error object."
					},
					"response": []
				},
				{
					"name": "Unfollow a Playlist",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer {{JWT}}",
								"description": "**Required.** A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user.",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/playlists/5e71dd4d7e4ff73544999691/followers",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"playlists",
								"5e71dd4d7e4ff73544999691",
								"followers"
							]
						},
						"description": "## Description\nRemove the current user as a follower of a playlist.\n\n## Response\nOn success, the HTTP status code in the response header is `200` OK and the response body is empty. On error, the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Unfollow a Playlist [ ✅DONE ] - On fail",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{JWT}}",
										"description": "**Required.** A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user.",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/playlists/5e71dd4d7e4ff73544999691/followers",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"playlists",
										"5e71dd4d7e4ff73544999691",
										"followers"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "96"
								},
								{
									"key": "Date",
									"value": "Fri, 27 Mar 2020 18:44:14 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1585338228"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "369"
								},
								{
									"key": "ETag",
									"value": "W/\"171-fYyEUr+Z4OYGnrUmZhruwQ17HzA\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"fail\",\n    \"error\": {\n        \"statusCode\": 400,\n        \"status\": \"fail\",\n        \"isOperational\": true\n    },\n    \"message\": \"You are not following this playlist.\",\n    \"stack\": \"Error: You are not following this playlist.\\n    at unfollowPlaylist (/Users/ahmed/Desktop/projects/SpotifyElGhalaba/back/controllers/followController.js:217:15)\\n    at process._tickCallback (internal/process/next_tick.js:68:7)\"\n}"
						},
						{
							"name": "Unfollow a Playlist [ ✅DONE ]",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{JWT}}",
										"description": "**Required.** A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user.",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/playlists/5e71dd4d7e4ff73544999691/followers",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"playlists",
										"5e71dd4d7e4ff73544999691",
										"followers"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "94"
								},
								{
									"key": "Date",
									"value": "Fri, 27 Mar 2020 18:44:52 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1585338228"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "34"
								},
								{
									"key": "ETag",
									"value": "W/\"22-OBdzu26AZPmkRFIHXLpgjLzRi0Y\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "\"Playlist unfollowed successfully\""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Library",
			"item": [
				{
					"name": "Check User's Saved Albums",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT}}",
								"description": "**Required** A valid JWT access token\\\n The **user-library-read** scope must have been authorized by the user.",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/albums/contains?ids=",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"albums",
								"contains"
							],
							"query": [
								{
									"key": "ids",
									"value": "",
									"description": "**Type:** String\\\n**Required** A comma-separated list of the Spotify IDs for the albums. Maximum: 50 IDs."
								}
							]
						},
						"description": "## Description\r\nCheck if one or more albums is already saved in the current Spotify user’s ‘Your Music’ library.\r\n\r\n## Response\r\nOn success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array of `true` or `false` values, in the same order in which the `ids` were specified. On error, the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Check User's Saved Albums(Done)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{JWT}}",
										"description": "**Required** A valid JWT access token\\\n The **user-library-read** scope must have been authorized by the user.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/me/albums/contains?ids=5e8a47861911493cf4552ee8,5e86aabb6a154414b8cabb41,5e86aabb6a154414b8cabb42,5e86aabb6a154414b8cabb43,5e86aabb6a154414b8cabb44,5e86aabb6a154414b8cabb45",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"albums",
										"contains"
									],
									"query": [
										{
											"key": "ids",
											"value": "5e8a47861911493cf4552ee8,5e86aabb6a154414b8cabb41,5e86aabb6a154414b8cabb42,5e86aabb6a154414b8cabb43,5e86aabb6a154414b8cabb44,5e86aabb6a154414b8cabb45",
											"description": "**Type:** String\\\n**Required** A comma-separated list of the Spotify IDs for the albums. Maximum: 50 IDs."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "93"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Apr 2020 22:52:27 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586130298"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "36"
								},
								{
									"key": "ETag",
									"value": "W/\"24-TSpoFql9gq2Mwnbk28S+Hn4PkUM\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    true,\n    false,\n    false,\n    false,\n    false,\n    false\n]"
						}
					]
				},
				{
					"name": "Get User's Saved Tracks",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT}}",
								"description": "**Required** A valid JWT access token\\\n The **user-library-read** scope must have been authorized by the user.",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/tracks?limit=&offset=",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"tracks"
							],
							"query": [
								{
									"key": "limit",
									"value": "",
									"description": "**Type:** Integer\\\n**Optional** The maximum number of objects to return. Default: 20. Minimum: 1. Maximum: 50. "
								},
								{
									"key": "offset",
									"value": "",
									"description": "**Type:** Integer\\\n**Optional** The index of the first object to return. Default: 0 (i.e., the first object). Use with limit to get the next set of objects."
								}
							]
						},
						"description": "## Description\r\nGet a list of the songs saved in the current Spotify user’s ‘Your Music’ library.\r\n\r\n## Response\r\nOn success, the HTTP status code in the response header is `200` OK and the response body contains an array of saved track objects (wrapped in a paging object) in JSON format. On error, the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Get User's Saved Tracks(Done)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "**Required** A valid JWT access token\\\n The **user-library-read** scope must have been authorized by the user.",
										"key": "Authorization",
										"type": "text",
										"value": "{{JWT}}"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/me/tracks?limit=&offset=",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"tracks"
									],
									"query": [
										{
											"key": "limit",
											"value": "",
											"description": "**Type:** Integer\\\n**Optional** The maximum number of objects to return. Default: 20. Minimum: 1. Maximum: 50. "
										},
										{
											"key": "offset",
											"value": "",
											"description": "**Type:** Integer\\\n**Optional** The index of the first object to return. Default: 0 (i.e., the first object). Use with limit to get the next set of objects."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "93"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Apr 2020 22:19:49 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586128164"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "996"
								},
								{
									"key": "ETag",
									"value": "W/\"3e4-k3wnrGb/QMz0q/vIteD4erYtrUM\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"href\": \"http://localhost:3000/api/v1/me/tracks?limit=&offset=\",\n    \"items\": [\n        {\n            \"track\": {\n                \"artists\": [\n                    \"5e8902a1412533282c4bd342\"\n                ],\n                \"disc_number\": 1,\n                \"external_urls\": [],\n                \"name\": \"test3\",\n                \"album\": \"5e89e1e22e9acf202cc3f289\",\n                \"duration_ms\": 5000,\n                \"explicit\": false,\n                \"track_number\": 3,\n                \"__v\": 0,\n                \"type\": \"track\",\n                \"uri\": \"spotify:track:5e890346412533282c4bd346\",\n                \"href\": \"http://localhost:3000/api/v1/tracks/5e890346412533282c4bd346\",\n                \"id\": \"5e890346412533282c4bd346\"\n            },\n            \"added_at\": \"2020-04-05T21:47:57.982Z\",\n            \"id\": \"5e8a520d6bf2981f546abcc6\"\n        },\n        {\n            \"track\": {\n                \"artists\": [\n                    \"5e88e82ca532d34e1c8575b5\"\n                ],\n                \"disc_number\": 1,\n                \"external_urls\": [],\n                \"name\": \"Faded\",\n                \"album\": \"5e89e1e22e9acf202cc3f289\",\n                \"duration_ms\": 5000,\n                \"explicit\": false,\n                \"track_number\": 1,\n                \"__v\": 0,\n                \"type\": \"track\",\n                \"uri\": \"spotify:track:5e89e3032e9acf202cc3f28a\",\n                \"href\": \"http://localhost:3000/api/v1/tracks/5e89e3032e9acf202cc3f28a\",\n                \"id\": \"5e89e3032e9acf202cc3f28a\"\n            },\n            \"added_at\": \"2020-04-05T21:56:01.135Z\",\n            \"id\": \"5e8a53f16bf2981f546abcc7\"\n        }\n    ],\n    \"limit\": 20,\n    \"next\": null,\n    \"offset\": 0,\n    \"previous\": null,\n    \"total\": 2\n}"
						}
					]
				},
				{
					"name": "Get User's Saved Albums",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"description": "**Required** A valid JWT access token\\\n The **user-library-read** scope must have been authorized by the user.",
								"key": "Authorization",
								"type": "text",
								"value": "{{JWT}}"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/albums?limit=&offset=",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"albums"
							],
							"query": [
								{
									"key": "limit",
									"value": "",
									"description": "**Type:** Integer\\\n**Optional** The maximum number of objects to return. Default: 20. Minimum: 1. Maximum: 50. "
								},
								{
									"key": "offset",
									"value": "",
									"description": "**Type:** Integer\\\n**Optional** The index of the first object to return. Default: 0 (i.e., the first object). Use with limit to get the next set of objects."
								}
							]
						},
						"description": "## Description\r\nGet a list of the albums saved in the current Spotify user’s ‘Your Music’ library.\r\n\r\n## Response\r\nOn success, the HTTP status code in the response header is `200` OK and the response body contains an array of saved album objects (wrapped in a paging object) in JSON format. On error, the header status code is an error code and the response body contains an error object.\r\n\r\nOn error, the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Get User's Saved Albums(Done)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "**Required** A valid JWT access token\\\n The **user-library-read** scope must have been authorized by the user.",
										"key": "Authorization",
										"type": "text",
										"value": "{{JWT}}"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/me/albums?limit=0&offset=0",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"albums"
									],
									"query": [
										{
											"key": "limit",
											"value": "0",
											"description": "**Type:** Integer\\\n**Optional** The maximum number of objects to return. Default: 20. Minimum: 1. Maximum: 50. "
										},
										{
											"key": "offset",
											"value": "0",
											"description": "**Type:** Integer\\\n**Optional** The index of the first object to return. Default: 0 (i.e., the first object). Use with limit to get the next set of objects."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "94"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Apr 2020 22:12:30 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586128164"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "1030"
								},
								{
									"key": "ETag",
									"value": "W/\"406-oaIEfXKSDYVbnB29kOnN50p8oqI\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"href\": \"http://localhost:3000/api/v1/me/albums?limit=0&offset=0\",\n    \"items\": [\n        {\n            \"album\": {\n                \"artists\": [\n                    \"5e8a41370b27de20a8738392\"\n                ],\n                \"genres\": [\n                    \"Rock\",\n                    \"jazz\"\n                ],\n                \"tracks\": [],\n                \"album_type\": \"album\",\n                \"label\": \"albumLabel\",\n                \"name\": \"Test Album3\",\n                \"release_date\": \"2020-04-05T21:02:48.383Z\",\n                \"images\": [],\n                \"__v\": 0,\n                \"uri\": \"spotify:track:5e8a47781911493cf4552ee7\",\n                \"type\": \"album\",\n                \"href\": \"http://localhost:3000/api/v1/albums/5e8a47781911493cf4552ee7\",\n                \"id\": \"5e8a47781911493cf4552ee7\"\n            },\n            \"added_at\": \"2020-04-05T22:00:29.613Z\",\n            \"id\": \"5e8a54fd6bf2981f546abcc8\"\n        },\n        {\n            \"album\": {\n                \"artists\": [\n                    \"5e8a41370b27de20a8738392\"\n                ],\n                \"genres\": [\n                    \"Rock\",\n                    \"jazz\"\n                ],\n                \"tracks\": [],\n                \"album_type\": \"album\",\n                \"label\": \"albumLabel\",\n                \"name\": \"Test Album3\",\n                \"release_date\": \"2020-04-05T21:03:02.603Z\",\n                \"images\": [],\n                \"__v\": 0,\n                \"uri\": \"spotify:track:5e8a47861911493cf4552ee8\",\n                \"type\": \"album\",\n                \"href\": \"http://localhost:3000/api/v1/albums/5e8a47861911493cf4552ee8\",\n                \"id\": \"5e8a47861911493cf4552ee8\"\n            },\n            \"added_at\": \"2020-04-05T22:01:03.129Z\",\n            \"id\": \"5e8a551f6bf2981f546abcc9\"\n        }\n    ],\n    \"limit\": 20,\n    \"next\": null,\n    \"offset\": 0,\n    \"previous\": null,\n    \"total\": 2\n}"
						}
					]
				},
				{
					"name": "Check User's Saved Tracks",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT}}",
								"description": "**Required** A valid JWT access token\\\n The **user-library-read** scope must have been authorized by the user.",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/tracks/contains?ids=5e890346412533282c4bd346,5e71de3c7e4ff73544999695,5e71de3c7e4ff73544999693",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"tracks",
								"contains"
							],
							"query": [
								{
									"key": "ids",
									"value": "5e890346412533282c4bd346,5e71de3c7e4ff73544999695,5e71de3c7e4ff73544999693",
									"description": "**Type:** String\\\n**Required** A comma-separated list of the Spotify IDs for the tracks. Maximum: 50 IDs.\t"
								}
							]
						},
						"description": "## Description\r\nCheck if one or more tracks is already saved in the current Spotify user’s ‘Your Music’ library.\r\n\r\n## Response\r\nOn success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array of `true` or `false` values, in the same order in which the `ids` were specified. On error, the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Check User's Saved Tracks(Done)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{JWT}}",
										"description": "**Required** A valid JWT access token\\\n The **user-library-read** scope must have been authorized by the user.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/me/tracks/contains?ids=5e890346412533282c4bd346,5e71de3c7e4ff73544999695,5e71de3c7e4ff73544999693",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"tracks",
										"contains"
									],
									"query": [
										{
											"key": "ids",
											"value": "5e890346412533282c4bd346,5e71de3c7e4ff73544999695,5e71de3c7e4ff73544999693",
											"description": "**Type:** String\\\n**Required** A comma-separated list of the Spotify IDs for the tracks. Maximum: 50 IDs.\t"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "90"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Apr 2020 22:54:00 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586130298"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "18"
								},
								{
									"key": "ETag",
									"value": "W/\"12-0W2AlmJ8QSf10emO9kmk5bbKRgE\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    true,\n    false,\n    false\n]"
						}
					]
				},
				{
					"name": "Remove saved Albums for Current User",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT}}",
								"description": "**Required** A valid JWT access token\\\nModification of the current user’s “Your Music” collection requires authorization of the **user-library-modify** scope.",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": "**Type:** String\\\n**Optional** Required if the IDs are passed in the request body, otherwise ignored. The content type of the request body: application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/albums?ids=",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"albums"
							],
							"query": [
								{
									"key": "ids",
									"value": "",
									"description": "**Type:** String\\\n**Required** A comma-separated list of the Spotify IDs.\\\n**For example:** ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M. Maximum: 50 IDs."
								}
							]
						},
						"description": "## Description\r\nRemove one or more albums from the current user’s ‘Your Music’ library.\r\n\r\n## Response\r\nOn success, the HTTP status code in the response header is `200` Success. On error, the header status code is an error code and the response body contains an error object. Trying to remove an album when you do not have the user’s authorization returns error `403` Forbidden."
					},
					"response": [
						{
							"name": "Remove Albums for Current User",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{JWT}}",
										"description": "**Required** A valid JWT access token\\\nModification of the current user’s “Your Music” collection requires authorization of the **user-library-modify** scope.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/me/albums?ids=5e6b921a1229f9354cef69dc",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"albums"
									],
									"query": [
										{
											"key": "ids",
											"value": "5e6b921a1229f9354cef69dc",
											"description": "**Type:** String\\\n**Required** A comma-separated list of the Spotify IDs.\\\n**For example:** ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M. Maximum: 50 IDs."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "99"
								},
								{
									"key": "Date",
									"value": "Tue, 17 Mar 2020 13:17:02 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1584454600"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Content-Length",
									"value": "0"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Remove saved Tracks for current user",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"description": "**Required** A valid JWT access token\\\nModification of the current user’s “Your Music” collection requires authorization of the **user-library-modify** scope.",
								"key": "Authorization",
								"type": "text",
								"value": "{{JWT}}"
							},
							{
								"description": "**Type:** String\\\n**Optional** Required if the IDs are passed in the request body, otherwise ignored. The content type of the request body: application/json",
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "ids",
									"value": "",
									"description": "**Type:** Array[String]\\\n**Optional** A JSON array of the Spotify IDs.\\\n**For example:**[\"4iV5W9uYEdYUVa79Axb7Rh\", \"1301WleyT98MSxVHPZCA6M\"]\\\nA maximum of 50 items can be specified in one request. Note: if the ids parameter is present in the query string, any IDs listed here in the body will be ignored.\t",
									"type": "text"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/me/tracks?ids=",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"tracks"
							],
							"query": [
								{
									"key": "ids",
									"value": "",
									"description": "**Type:** String\\\n**Required** A comma-separated list of the Spotify IDs.\\\n**For example:** ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M. Maximum: 50 IDs."
								}
							]
						},
						"description": "## Description\r\nRemove one or more tracks from the current user’s ‘Your Music’ library.\r\n\r\n## Response\r\nOn success, the HTTP status code in the response header is `200` Success. On error, the header status code is an error code and the response body contains an error object. Trying to remove an album when you do not have the user’s authorization returns error `403` Forbidden."
					},
					"response": [
						{
							"name": "Remove saved Tracks for current user(Done)",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "**Required** A valid JWT access token\\\nModification of the current user’s “Your Music” collection requires authorization of the **user-library-modify** scope.",
										"key": "Authorization",
										"type": "text",
										"value": "{{JWT}}"
									},
									{
										"description": "**Type:** String\\\n**Optional** Required if the IDs are passed in the request body, otherwise ignored. The content type of the request body: application/json",
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "ids",
											"value": "",
											"description": "**Type:** Array[String]\\\n**Optional** A JSON array of the Spotify IDs.\\\n**For example:**[\"4iV5W9uYEdYUVa79Axb7Rh\", \"1301WleyT98MSxVHPZCA6M\"]\\\nA maximum of 50 items can be specified in one request. Note: if the ids parameter is present in the query string, any IDs listed here in the body will be ignored.\t",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL}}api/v1/me/tracks?ids=5e890346412533282c4bd346",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"tracks"
									],
									"query": [
										{
											"key": "ids",
											"value": "5e890346412533282c4bd346",
											"description": "**Type:** String\\\n**Required** A comma-separated list of the Spotify IDs.\\\n**For example:** ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M. Maximum: 50 IDs."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "96"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Apr 2020 22:51:35 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586130298"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Content-Length",
									"value": "0"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Save Album for Current User",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{JWT}}",
								"description": "**Required** A valid JWT access token\\\nModification of the current user’s “Your Music” collection requires authorization of the **user-library-modify** scope.",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/albums?ids=",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"albums"
							],
							"query": [
								{
									"key": "ids",
									"value": "",
									"description": "**Type:** String\\\n**Required** A comma-separated list of the Spotify IDs.\\\n**For example:** ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M. Maximum: 50 IDs."
								}
							]
						},
						"description": "## Description\r\nSave one or more albums to the current user’s ‘Your Music’ library.\r\n\r\n## Response\r\nOn success, the HTTP status code in the response header is `201` Created \"If the body is empty then the track was already saved,else the body will contain the saved album document\". On error, the header status code is an error code and the response body contains an error object. Trying to add an album when you do not have the user’s authorization returns error `403` Forbidden."
					},
					"response": [
						{
							"name": "Save Album for Current User(Done)",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "{{JWT}}",
										"description": "**Required** A valid JWT access token\\\nModification of the current user’s “Your Music” collection requires authorization of the **user-library-modify** scope.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/me/albums?ids=5e8a47861911493cf4552ee8",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"albums"
									],
									"query": [
										{
											"key": "ids",
											"value": "5e8a47861911493cf4552ee8",
											"description": "**Type:** String\\\n**Required** A comma-separated list of the Spotify IDs.\\\n**For example:** ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M. Maximum: 50 IDs."
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "90"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Apr 2020 22:01:02 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586126868"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "110"
								},
								{
									"key": "ETag",
									"value": "W/\"6e-MLe7qgfJK9SLdeswhkTaoP5PkHY\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"album\": \"5e8a47861911493cf4552ee8\",\n        \"added_at\": \"2020-04-05T22:01:03.129Z\",\n        \"user\": \"5e8a41370b27de20a8738391\"\n    }\n]"
						}
					]
				},
				{
					"name": "Save Tracks for Current User",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"description": "**Required** A valid JWT access token\\\nModification of the current user’s “Your Music” collection requires authorization of the **user-library-modify** scope.",
								"key": "Authorization",
								"type": "text",
								"value": "{{JWT}}"
							},
							{
								"description": "**Type:** String\\\n**Optional** Required if the IDs are passed in the request body, otherwise ignored. The content type of the request body: application/json",
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/tracks?ids=",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"tracks"
							],
							"query": [
								{
									"key": "ids",
									"value": ""
								}
							]
						},
						"description": "## Description\r\nSave one or more tracks to the current user’s ‘Your Music’ library.\r\n\r\n## Response\r\nOn success, the HTTP status code in the response header is `201` created \"If the body is empty then the track was already saved,else the body will contain the saved track document\". On error, the header status code is an error code and the response body contains an error object. Trying to add a track when you do not have the user’s authorization, or when you have over 10.000 tracks in Your Music, returns error `403` Forbidden."
					},
					"response": [
						{
							"name": "Save Tracks for Current User(Done)",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "**Required** A valid JWT access token\\\nModification of the current user’s “Your Music” collection requires authorization of the **user-library-modify** scope.",
										"key": "Authorization",
										"type": "text",
										"value": "{{JWT}}"
									},
									{
										"description": "**Type:** String\\\n**Optional** Required if the IDs are passed in the request body, otherwise ignored. The content type of the request body: application/json",
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/me/tracks?ids=5e89e3032e9acf202cc3f28a",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"tracks"
									],
									"query": [
										{
											"key": "ids",
											"value": "5e89e3032e9acf202cc3f28a"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "95"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Apr 2020 21:56:00 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586126868"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "110"
								},
								{
									"key": "ETag",
									"value": "W/\"6e-AgISOPhXOe8yqd/HhdwPnIj5FTY\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"track\": \"5e89e3032e9acf202cc3f28a\",\n        \"added_at\": \"2020-04-05T21:56:01.135Z\",\n        \"user\": \"5e8a41370b27de20a8738391\"\n    }\n]"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Personalization",
			"item": [
				{
					"name": "Get a User's Top Artists and Tracks [NOT DONE]",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/top/artists?time_range=medium_term&limit=10&offset=5",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"top",
								"artists"
							],
							"query": [
								{
									"key": "time_range",
									"value": "medium_term",
									"description": "**Optional**\nOver what time frame the affinities are computed. Valid values: long_term (calculated from several years of data and including all new data as it becomes available), medium_term (approximately last 6 months), short_term (approximately last 4 weeks). Default: medium_term."
								},
								{
									"key": "limit",
									"value": "10",
									"description": "**Optional**\n The number of entities to return. Default: 20. Minimum: 1. Maximum: 50. For example: limit=2"
								},
								{
									"key": "offset",
									"value": "5",
									"description": "**Optional**\nThe index of the first entity to return. Default: 0 (i.e., the first track). Use with limit to get the next set of entities."
								}
							]
						},
						"description": "## Description\nGet the current user’s top artists or tracks based on calculated affinity.\n\nAffinity is a measure of the expected preference a user has for a particular track or artist.  It is based on user behavior, including play history.\n\n\nAs a user’s behavior is likely to shift over time, this preference data is available over three time spans. See `time_range` in the query parameter table for more information.\n\nOn success, the HTTP status code in the response header is `200 OK` and the response body contains a paging object of Artists or Tracks. On error, the header status code is an error code and the response body contains an error object.\n\n## Response\n\nOn success, the HTTP status code in the response header is `200 OK` and the response body contains a <a href = \"https://developer.spotify.com/documentation/web-api/reference/object-model/#paging-object\">paging object</a> of <a href = \"https://developer.spotify.com/documentation/web-api/reference/object-model/#artist-object-full\">Artists</a> or <a href = \"https://developer.spotify.com/documentation/web-api/reference/object-model/#track-object-full\">Tracks</a>. On error, the header status code is an <a href = \"https://developer.spotify.com/documentation/web-api/#response-status-codes\">error code</a> and the response body contains an <a href= \"https://developer.spotify.com/documentation/web-api/#response-schema\">error object</a>."
					},
					"response": [
						{
							"name": "Get a User's Top Artists",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}api/v1/me/top/artists?time_range=medium_term&limit=10&offset=5",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"top",
										"artists"
									],
									"query": [
										{
											"key": "time_range",
											"value": "medium_term"
										},
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "offset",
											"value": "5"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Cache-Control",
									"value": "private, max-age=0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Accept, App-Platform, Authorization, Content-Type, Origin, Retry-After, Spotify-App-Version, X-Cloud-Trace-Context"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST, OPTIONS, PUT, DELETE, PATCH"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Access-Control-Max-Age",
									"value": "604800"
								},
								{
									"key": "content-encoding",
									"value": "gzip"
								},
								{
									"key": "Date",
									"value": "Thu, 05 Mar 2020 20:54:03 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 google"
								},
								{
									"key": "Alt-Svc",
									"value": "clear"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"items\": [\n        {\n            \"external_urls\": {\n                \"spotify\": \"https://open.spotify.com/artist/52lsD82iOqGtyfEMqWgk4f\"\n            },\n            \"followers\": {\n                \"href\": null,\n                \"total\": 239859\n            },\n            \"genres\": [\n                \"arab folk\",\n                \"belly dance\",\n                \"classic arab pop\"\n            ],\n            \"href\": \"https://api.spotify.com/v1/artists/52lsD82iOqGtyfEMqWgk4f\",\n            \"id\": \"52lsD82iOqGtyfEMqWgk4f\",\n            \"images\": [\n                {\n                    \"height\": 640,\n                    \"url\": \"https://i.scdn.co/image/ab67616d0000b2739604a0ff2983ec0d36100c4c\",\n                    \"width\": 640\n                },\n                {\n                    \"height\": 300,\n                    \"url\": \"https://i.scdn.co/image/ab67616d00001e029604a0ff2983ec0d36100c4c\",\n                    \"width\": 300\n                },\n                {\n                    \"height\": 64,\n                    \"url\": \"https://i.scdn.co/image/ab67616d000048519604a0ff2983ec0d36100c4c\",\n                    \"width\": 64\n                }\n            ],\n            \"name\": \"Umm Kulthum\",\n            \"popularity\": 46,\n            \"type\": \"artist\",\n            \"uri\": \"spotify:artist:52lsD82iOqGtyfEMqWgk4f\"\n        },\n        {\n            \"external_urls\": {\n                \"spotify\": \"https://open.spotify.com/artist/6bb9VI1PpPTEmdgcgjTppX\"\n            },\n            \"followers\": {\n                \"href\": null,\n                \"total\": 879148\n            },\n            \"genres\": [\n                \"arab pop\",\n                \"egyptian pop\"\n            ],\n            \"href\": \"https://api.spotify.com/v1/artists/6bb9VI1PpPTEmdgcgjTppX\",\n            \"id\": \"6bb9VI1PpPTEmdgcgjTppX\",\n            \"images\": [\n                {\n                    \"height\": 640,\n                    \"url\": \"https://i.scdn.co/image/63aed2e51201f1e03946b043486420fe177afbb8\",\n                    \"width\": 640\n                },\n                {\n                    \"height\": 320,\n                    \"url\": \"https://i.scdn.co/image/4c1be73bde4e00e923b337b3783e5aa981439918\",\n                    \"width\": 320\n                },\n                {\n                    \"height\": 160,\n                    \"url\": \"https://i.scdn.co/image/aa2fa529112ffa13d7748391cf82a74967034cfb\",\n                    \"width\": 160\n                }\n            ],\n            \"name\": \"Mohamed Hamaki\",\n            \"popularity\": 56,\n            \"type\": \"artist\",\n            \"uri\": \"spotify:artist:6bb9VI1PpPTEmdgcgjTppX\"\n        }\n    ],\n    \"total\": 7,\n    \"limit\": 10,\n    \"offset\": 5,\n    \"href\": \"https://api.spotify.com/v1/me/top/artists?limit=10&offset=5\",\n    \"previous\": null,\n    \"next\": null\n}"
						}
					]
				}
			],
			"description": "Endpoints for retrieving information about the user’s listening habits.",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Player",
			"item": [
				{
					"name": "Get a User's Available Devices",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "**Required** A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of a user. The access token must have the  **user-read-playback-state**  scope authorized in order to read information.",
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{jwt}}"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/player/devices",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"player",
								"devices"
							]
						},
						"description": "## Description\nGet information about a user’s available devices.\n\n## Response\nA successful request will return a `200 OK` response code with a json payload that contains the <a href = \"https://developer.spotify.com/documentation/web-api/reference/player/get-a-users-available-devices/#device-object\">device objects</a>. When no available devices are found, the request will return a `200 OK` response with an empty devices list.\n"
					},
					"response": [
						{
							"name": "Get a User's Available Devices",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "**Required** A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of a user. The access token must have the  **user-read-playback-state**  scope authorized in order to read information.",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{jwt}}"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/me/player/devices",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"player",
										"devices"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "82"
								},
								{
									"key": "Date",
									"value": "Fri, 27 Mar 2020 17:36:21 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1585333883"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "296"
								},
								{
									"key": "ETag",
									"value": "W/\"128-RMVUb+FQdl7JkmPJuqApfsXxp0Q\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"devices\": {\n        \"devices\": [\n            {\n                \"_id\": \"5e7be0e6c966a30ba4e5e724\",\n                \"name\": \"Android Browser\",\n                \"type\": \"phablet\",\n                \"isActive\": false\n            },\n            {\n                \"_id\": \"5e7be105c966a30ba4e5e725\",\n                \"name\": \"Opera\",\n                \"type\": \"desktop\",\n                \"isActive\": true\n            },\n            {\n                \"_id\": \"5e7bdde59c9526124ca5b048\",\n                \"name\": \"Android Browser\",\n                \"type\": \"phablet\",\n                \"isActive\": false\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "Get Information About The User's Current Playback",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}",
								"description": "**Required**\n A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of a user. The access token must have the user-read-playback-state scope authorized in order to read information.",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/player",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"player"
							]
						},
						"description": "## Description\n\nGet information about the user’s current playback state, including track, track progress.\n\n## Response\n\nA successful request will return a `200 OK` response code with a json payload that contains information about the current playback. The information returned is for the last known state."
					},
					"response": [
						{
							"name": "Get Information About The User's Current Playback [DONE]",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt}}",
										"description": "**Required**\n A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of a user. The access token must have the user-read-playback-state scope authorized in order to read information.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/me/player",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"player"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "99"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Apr 2020 15:01:55 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586102492"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "729"
								},
								{
									"key": "ETag",
									"value": "W/\"2d9-gWQKSM0CuPbUuO9FbXNb0E+vDE4\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"currentlyPlaying\": {\n        \"track\": {\n            \"_id\": \"5e89e3032e9acf202cc3f28a\",\n            \"artists\": [\n                {\n                    \"_id\": \"5e88e82ca532d34e1c8575b5\",\n                    \"external_urls\": [],\n                    \"genres\": [],\n                    \"albums\": [],\n                    \"userInfo\": \"5e88e82ba532d34e1c8575b4\",\n                    \"followers\": [],\n                    \"images\": [],\n                    \"__v\": 0\n                }\n            ],\n            \"disc_number\": 1,\n            \"external_urls\": [],\n            \"name\": \"Faded\",\n            \"album\": {\n                \"_id\": \"5e89e1e22e9acf202cc3f289\",\n                \"artists\": [\n                    \"5e88e82ca532d34e1c8575b5\"\n                ],\n                \"genres\": [\n                    \"Rock\",\n                    \"jazz\"\n                ],\n                \"tracks\": [\n                    \"5e89e3032e9acf202cc3f28a\"\n                ],\n                \"album_type\": \"album\",\n                \"name\": \"Kings Never Die\",\n                \"release_date\": \"2020-04-05T13:49:22.374Z\",\n                \"images\": [],\n                \"__v\": 1\n            },\n            \"duration_ms\": 5000,\n            \"explicit\": false,\n            \"track_number\": 1,\n            \"__v\": 0\n        },\n        \"timestamp\": \"2020-04-05T13:57:55.042Z\",\n        \"repeat_state\": false,\n        \"shuffle_state\": false,\n        \"volume_percent\": 60,\n        \"is_playing\": false,\n        \"progress_ms\": 0\n    }\n}"
						}
					]
				},
				{
					"name": "Get Current User's Recently Played Tracks",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/player/recently-played?limit=20&before=1584831850",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"player",
								"recently-played"
							],
							"query": [
								{
									"key": "limit",
									"value": "20",
									"description": "*Optional*. The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50."
								},
								{
									"key": "before",
									"value": "1584831850",
									"description": "*Optional*. A Unix timestamp in milliseconds. Returns all items before (but not including) the given timestamp. If before is specified, after must not be specified."
								}
							]
						},
						"description": "## Description\nGet tracks from the current user’s recently played tracks.\nReturns the most recent 50 tracks played by a user. The endpoint uses a bidirectional cursor for paging. Follow the next field with the before parameter to move back in time, or use the after parameter to move forward in time. If you supply no before or after parameter, the endpoint will return the most recently played songs, and the next link will page back in time.\n\n## Response\n\nOn success, the HTTP status code in the response header is `200 OK` and the response body contains an array of <a href = \"https://developer.spotify.com/documentation/web-api/reference/player/get-recently-played/#play-history-object\">play history objects</a> in JSON format. The play history items each contain the date and time the track was played, and a <a href = \"https://developer.spotify.com/documentation/web-api/reference/object-model/#track-object-simplified\">track object</a>. On error, the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Get Current User's Recently Played Tracks",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/me/player/recently-played?limit=50&beore=1584831850",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"player",
										"recently-played"
									],
									"query": [
										{
											"key": "limit",
											"value": "50",
											"description": "**Optional**\nThe maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50."
										},
										{
											"key": "beore",
											"value": "1584831850",
											"description": "**Optional**\nThe timestamp before which "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "99"
								},
								{
									"key": "Date",
									"value": "Fri, 27 Mar 2020 18:26:09 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1585337161"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "3102"
								},
								{
									"key": "ETag",
									"value": "W/\"c1e-SaHdWCnIyGFx0Euvq/9l/maU7+M\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"items\": [\n        {\n            \"track\": {\n                \"_id\": \"5e71de697e4ff73544999698\",\n                \"artists\": [],\n                \"disc_number\": 1,\n                \"external_urls\": [],\n                \"name\": \"People help the people 4\",\n                \"album\": \"5e71de1c7e4ff73544999694\",\n                \"duration_ms\": 5000,\n                \"explicit\": false,\n                \"is_playable\": true,\n                \"track_number\": 4,\n                \"__v\": 0\n            },\n            \"played_at\": \"2020-03-27T18:08:48.912Z\"\n        },\n        {\n            \"track\": {\n                \"_id\": \"5e71de697e4ff73544999698\",\n                \"artists\": [],\n                \"disc_number\": 1,\n                \"external_urls\": [],\n                \"name\": \"People help the people 4\",\n                \"album\": \"5e71de1c7e4ff73544999694\",\n                \"duration_ms\": 5000,\n                \"explicit\": false,\n                \"is_playable\": true,\n                \"track_number\": 4,\n                \"__v\": 0\n            },\n            \"played_at\": \"2020-03-27T18:09:01.863Z\"\n        },\n        {\n            \"track\": {\n                \"_id\": \"5e71de697e4ff73544999698\",\n                \"artists\": [],\n                \"disc_number\": 1,\n                \"external_urls\": [],\n                \"name\": \"People help the people 4\",\n                \"album\": \"5e71de1c7e4ff73544999694\",\n                \"duration_ms\": 5000,\n                \"explicit\": false,\n                \"is_playable\": true,\n                \"track_number\": 4,\n                \"__v\": 0\n            },\n            \"played_at\": \"2020-03-27T18:09:03.573Z\"\n        },\n        {\n            \"track\": {\n                \"_id\": \"5e71de697e4ff73544999698\",\n                \"artists\": [],\n                \"disc_number\": 1,\n                \"external_urls\": [],\n                \"name\": \"People help the people 4\",\n                \"album\": \"5e71de1c7e4ff73544999694\",\n                \"duration_ms\": 5000,\n                \"explicit\": false,\n                \"is_playable\": true,\n                \"track_number\": 4,\n                \"__v\": 0\n            },\n            \"played_at\": \"2020-03-27T18:09:05.460Z\"\n        },\n        {\n            \"track\": {\n                \"_id\": \"5e71de697e4ff73544999698\",\n                \"artists\": [],\n                \"disc_number\": 1,\n                \"external_urls\": [],\n                \"name\": \"People help the people 4\",\n                \"album\": \"5e71de1c7e4ff73544999694\",\n                \"duration_ms\": 5000,\n                \"explicit\": false,\n                \"is_playable\": true,\n                \"track_number\": 4,\n                \"__v\": 0\n            },\n            \"played_at\": \"2020-03-27T18:09:08.096Z\"\n        },\n        {\n            \"track\": {\n                \"_id\": \"5e71de697e4ff73544999698\",\n                \"artists\": [],\n                \"disc_number\": 1,\n                \"external_urls\": [],\n                \"name\": \"People help the people 4\",\n                \"album\": \"5e71de1c7e4ff73544999694\",\n                \"duration_ms\": 5000,\n                \"explicit\": false,\n                \"is_playable\": true,\n                \"track_number\": 4,\n                \"__v\": 0\n            },\n            \"played_at\": \"2020-03-27T18:09:09.819Z\"\n        },\n        {\n            \"track\": {\n                \"_id\": \"5e71de697e4ff73544999698\",\n                \"artists\": [],\n                \"disc_number\": 1,\n                \"external_urls\": [],\n                \"name\": \"People help the people 4\",\n                \"album\": \"5e71de1c7e4ff73544999694\",\n                \"duration_ms\": 5000,\n                \"explicit\": false,\n                \"is_playable\": true,\n                \"track_number\": 4,\n                \"__v\": 0\n            },\n            \"played_at\": \"2020-03-27T18:09:11.249Z\"\n        },\n        {\n            \"track\": {\n                \"_id\": \"5e71de697e4ff73544999698\",\n                \"artists\": [],\n                \"disc_number\": 1,\n                \"external_urls\": [],\n                \"name\": \"People help the people 4\",\n                \"album\": \"5e71de1c7e4ff73544999694\",\n                \"duration_ms\": 5000,\n                \"explicit\": false,\n                \"is_playable\": true,\n                \"track_number\": 4,\n                \"__v\": 0\n            },\n            \"played_at\": \"2020-03-27T18:09:12.920Z\"\n        },\n        {\n            \"track\": {\n                \"_id\": \"5e71de697e4ff73544999698\",\n                \"artists\": [],\n                \"disc_number\": 1,\n                \"external_urls\": [],\n                \"name\": \"People help the people 4\",\n                \"album\": \"5e71de1c7e4ff73544999694\",\n                \"duration_ms\": 5000,\n                \"explicit\": false,\n                \"is_playable\": true,\n                \"track_number\": 4,\n                \"__v\": 0\n            },\n            \"played_at\": \"2020-03-27T18:09:14.979Z\"\n        },\n        {\n            \"track\": {\n                \"_id\": \"5e71de697e4ff73544999698\",\n                \"artists\": [],\n                \"disc_number\": 1,\n                \"external_urls\": [],\n                \"name\": \"People help the people 4\",\n                \"album\": \"5e71de1c7e4ff73544999694\",\n                \"duration_ms\": 5000,\n                \"explicit\": false,\n                \"is_playable\": true,\n                \"track_number\": 4,\n                \"__v\": 0\n            },\n            \"played_at\": \"2020-03-27T18:09:18.388Z\"\n        },\n        {\n            \"track\": {\n                \"_id\": \"5e71de697e4ff73544999698\",\n                \"artists\": [],\n                \"disc_number\": 1,\n                \"external_urls\": [],\n                \"name\": \"People help the people 4\",\n                \"album\": \"5e71de1c7e4ff73544999694\",\n                \"duration_ms\": 5000,\n                \"explicit\": false,\n                \"is_playable\": true,\n                \"track_number\": 4,\n                \"__v\": 0\n            },\n            \"played_at\": \"2020-03-27T18:09:19.589Z\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get the User's Currently Playing Track",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}",
								"description": "**Required** \nA valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of a user. The access token must have the user-read-currently-playing and/or user-read-playback-state scope authorized in order to read information.",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/player/currently-playing",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"player",
								"currently-playing"
							]
						},
						"description": "## Description\r\nGet the object currently being played on the user’s Spotify account.\r\n\r\n## Response\r\n\r\nA successful request will return a `200 OK` response code with a json payload that contains information about the currently playing track and context (see below). The information returned is for the last known state, which means an inactive device could be returned if it was the last one to execute playback. When no available devices are found, the request will return a `200 OK` response but with no data populated. When no track is currently playing, the request will return a `204 NO CONTENT` response with no payload. If private session is enabled the response will be a `204 NO CONTENT` with an empty payload."
					},
					"response": [
						{
							"name": "Get the User's Currently Playing Track",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt}}",
										"description": "**Required** \nA valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of a user. The access token must have the user-read-currently-playing and/or user-read-playback-state scope authorized in order to read information.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api//v1/me/player/currently-playing",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"",
										"v1",
										"me",
										"player",
										"currently-playing"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Cache-Control",
									"value": "private, max-age=0"
								},
								{
									"key": "X-Robots-Tag",
									"value": "noindex, nofollow"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Accept, App-Platform, Authorization, Content-Type, Origin, Retry-After, Spotify-App-Version, X-Cloud-Trace-Context"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST, OPTIONS, PUT, DELETE, PATCH"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Access-Control-Max-Age",
									"value": "604800"
								},
								{
									"key": "content-encoding",
									"value": "gzip"
								},
								{
									"key": "Date",
									"value": "Fri, 06 Mar 2020 09:51:39 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 google"
								},
								{
									"key": "Alt-Svc",
									"value": "clear"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": 1583488271911,\n    \"context\": {\n        \"external_urls\": {\n            \"spotify\": \"https://open.spotify.com/playlist/37i9dQZF1DXd3AhRYJnfcl\"\n        },\n        \"href\": \"https://api.spotify.com/v1/playlists/37i9dQZF1DXd3AhRYJnfcl\",\n        \"type\": \"playlist\",\n        \"uri\": \"spotify:playlist:37i9dQZF1DXd3AhRYJnfcl\"\n    },\n    \"progress_ms\": 28580,\n    \"item\": {\n        \"album\": {\n            \"album_type\": \"album\",\n            \"artists\": [\n                {\n                    \"external_urls\": {\n                        \"spotify\": \"https://open.spotify.com/artist/2Wk167T0fY1fABsHM5qFcI\"\n                    },\n                    \"href\": \"https://api.spotify.com/v1/artists/2Wk167T0fY1fABsHM5qFcI\",\n                    \"id\": \"2Wk167T0fY1fABsHM5qFcI\",\n                    \"name\": \"Sherine\",\n                    \"type\": \"artist\",\n                    \"uri\": \"spotify:artist:2Wk167T0fY1fABsHM5qFcI\"\n                }\n            ],\n            \"available_markets\": [\n                \"AD\",\n                \"AE\",\n                \"AR\",\n                \"AT\",\n                \"AU\",\n                \"BE\",\n                \"BG\",\n                \"BH\",\n                \"BO\",\n                \"BR\",\n                \"CA\",\n                \"CH\",\n                \"CL\",\n                \"CO\",\n                \"CR\",\n                \"CY\",\n                \"CZ\",\n                \"DE\",\n                \"DK\",\n                \"DO\",\n                \"DZ\",\n                \"EC\",\n                \"EE\",\n                \"EG\",\n                \"ES\",\n                \"FI\",\n                \"FR\",\n                \"GB\",\n                \"GR\",\n                \"GT\",\n                \"HK\",\n                \"HN\",\n                \"HU\",\n                \"ID\",\n                \"IE\",\n                \"IL\",\n                \"IN\",\n                \"IS\",\n                \"IT\",\n                \"JO\",\n                \"JP\",\n                \"KW\",\n                \"LB\",\n                \"LI\",\n                \"LT\",\n                \"LU\",\n                \"LV\",\n                \"MA\",\n                \"MC\",\n                \"MT\",\n                \"MX\",\n                \"MY\",\n                \"NI\",\n                \"NL\",\n                \"NO\",\n                \"NZ\",\n                \"OM\",\n                \"PA\",\n                \"PE\",\n                \"PH\",\n                \"PL\",\n                \"PS\",\n                \"PT\",\n                \"PY\",\n                \"QA\",\n                \"RO\",\n                \"SA\",\n                \"SE\",\n                \"SG\",\n                \"SK\",\n                \"SV\",\n                \"TH\",\n                \"TN\",\n                \"TR\",\n                \"TW\",\n                \"US\",\n                \"UY\",\n                \"VN\",\n                \"ZA\"\n            ],\n            \"external_urls\": {\n                \"spotify\": \"https://open.spotify.com/album/1aCq7XjXXVc3WxPYYUrbeP\"\n            },\n            \"href\": \"https://api.spotify.com/v1/albums/1aCq7XjXXVc3WxPYYUrbeP\",\n            \"id\": \"1aCq7XjXXVc3WxPYYUrbeP\",\n            \"images\": [\n                {\n                    \"height\": 640,\n                    \"url\": \"https://i.scdn.co/image/ab67616d0000b273cfa4e906cda39d8f62fe81e3\",\n                    \"width\": 640\n                },\n                {\n                    \"height\": 300,\n                    \"url\": \"https://i.scdn.co/image/ab67616d00001e02cfa4e906cda39d8f62fe81e3\",\n                    \"width\": 300\n                },\n                {\n                    \"height\": 64,\n                    \"url\": \"https://i.scdn.co/image/ab67616d00004851cfa4e906cda39d8f62fe81e3\",\n                    \"width\": 64\n                }\n            ],\n            \"name\": \"نساى\",\n            \"release_date\": \"2018-10-24\",\n            \"release_date_precision\": \"day\",\n            \"total_tracks\": 12,\n            \"type\": \"album\",\n            \"uri\": \"spotify:album:1aCq7XjXXVc3WxPYYUrbeP\"\n        },\n        \"artists\": [\n            {\n                \"external_urls\": {\n                    \"spotify\": \"https://open.spotify.com/artist/2Wk167T0fY1fABsHM5qFcI\"\n                },\n                \"href\": \"https://api.spotify.com/v1/artists/2Wk167T0fY1fABsHM5qFcI\",\n                \"id\": \"2Wk167T0fY1fABsHM5qFcI\",\n                \"name\": \"Sherine\",\n                \"type\": \"artist\",\n                \"uri\": \"spotify:artist:2Wk167T0fY1fABsHM5qFcI\"\n            }\n        ],\n        \"available_markets\": [\n            \"AD\",\n            \"AE\",\n            \"AR\",\n            \"AT\",\n            \"AU\",\n            \"BE\",\n            \"BG\",\n            \"BH\",\n            \"BO\",\n            \"BR\",\n            \"CA\",\n            \"CH\",\n            \"CL\",\n            \"CO\",\n            \"CR\",\n            \"CY\",\n            \"CZ\",\n            \"DE\",\n            \"DK\",\n            \"DO\",\n            \"DZ\",\n            \"EC\",\n            \"EE\",\n            \"EG\",\n            \"ES\",\n            \"FI\",\n            \"FR\",\n            \"GB\",\n            \"GR\",\n            \"GT\",\n            \"HK\",\n            \"HN\",\n            \"HU\",\n            \"ID\",\n            \"IE\",\n            \"IL\",\n            \"IN\",\n            \"IS\",\n            \"IT\",\n            \"JO\",\n            \"JP\",\n            \"KW\",\n            \"LB\",\n            \"LI\",\n            \"LT\",\n            \"LU\",\n            \"LV\",\n            \"MA\",\n            \"MC\",\n            \"MT\",\n            \"MX\",\n            \"MY\",\n            \"NI\",\n            \"NL\",\n            \"NO\",\n            \"NZ\",\n            \"OM\",\n            \"PA\",\n            \"PE\",\n            \"PH\",\n            \"PL\",\n            \"PS\",\n            \"PT\",\n            \"PY\",\n            \"QA\",\n            \"RO\",\n            \"SA\",\n            \"SE\",\n            \"SG\",\n            \"SK\",\n            \"SV\",\n            \"TH\",\n            \"TN\",\n            \"TR\",\n            \"TW\",\n            \"US\",\n            \"UY\",\n            \"VN\",\n            \"ZA\"\n        ],\n        \"disc_number\": 1,\n        \"duration_ms\": 197302,\n        \"explicit\": false,\n        \"external_ids\": {\n            \"isrc\": \"EGA071800041\"\n        },\n        \"external_urls\": {\n            \"spotify\": \"https://open.spotify.com/track/2AVA6NJZXA7UERS5nnsTzz\"\n        },\n        \"href\": \"https://api.spotify.com/v1/tracks/2AVA6NJZXA7UERS5nnsTzz\",\n        \"id\": \"2AVA6NJZXA7UERS5nnsTzz\",\n        \"is_local\": false,\n        \"name\": \"نساى\",\n        \"popularity\": 45,\n        \"preview_url\": \"https://p.scdn.co/mp3-preview/29df7126bd8709e86840947208e906079e8eb533?cid=774b29d4f13844c495f206cafdad9c86\",\n        \"track_number\": 1,\n        \"type\": \"track\",\n        \"uri\": \"spotify:track:2AVA6NJZXA7UERS5nnsTzz\"\n    },\n    \"currently_playing_type\": \"track\",\n    \"actions\": {\n        \"disallows\": {\n            \"resuming\": true\n        }\n    },\n    \"is_playing\": true\n}"
						}
					]
				},
				{
					"name": "Pause a User's Playback",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}",
								"description": "**Required** \nA valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details.\nThe access token must have been issued on behalf of a user.\nThe access token must have the user-modify-playback-state scope authorized in order to control playback.",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/player/pause",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"player",
								"pause"
							]
						},
						"description": "## Description\nPause playback on the user’s account.\n\n## Response\nA completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the Get Information About The User’s Current Playback endpoint to check that your issued command was handled correctly by the player.\n\nWhen performing an action that is restricted, `404 NOT FOUND` or `403 FORBIDDEN` will be returned together with a player error message. For example, if there are no active devices found, the request will return `404 NOT FOUND` response code and the reason `NO_ACTIVE_DEVICE`, or, if the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned together with the `PREMIUM_REQUIRED` reason.\n"
					},
					"response": [
						{
							"name": "Pause a User's Playback",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt}}",
										"description": "**Required** \nA valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details.\nThe access token must have been issued on behalf of a user.\nThe access token must have the user-modify-playback-state scope authorized in order to control playback.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/me/player/pause?device_id=8c6d92c58bd16bdc1c25a2ca4fcc9a95a791c40e",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"player",
										"pause"
									],
									"query": [
										{
											"key": "device_id",
											"value": "8c6d92c58bd16bdc1c25a2ca4fcc9a95a791c40e",
											"description": "**Optional**\n The id of the device this command is targeting. If not supplied, the user’s currently active device is the target."
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Cache-Control",
									"value": "private, max-age=0"
								},
								{
									"key": "X-Robots-Tag",
									"value": "noindex, nofollow"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Accept, App-Platform, Authorization, Content-Type, Origin, Retry-After, Spotify-App-Version, X-Cloud-Trace-Context"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST, OPTIONS, PUT, DELETE, PATCH"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Access-Control-Max-Age",
									"value": "604800"
								},
								{
									"key": "content-encoding",
									"value": "gzip"
								},
								{
									"key": "Date",
									"value": "Thu, 05 Mar 2020 23:47:53 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 google"
								},
								{
									"key": "Alt-Svc",
									"value": "clear"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"status\": 403,\n        \"message\": \"Player command failed: Premium required\",\n        \"reason\": \"PREMIUM_REQUIRED\"\n    }\n}"
						}
					]
				},
				{
					"name": "Seek To Position In Currently Playing Track",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}",
								"description": "Required. A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details.\nThe access token must have been issued on behalf of a user.\nThe access token must have the user-modify-playback-state scope authorized in order to control playback.",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/player/seek?position_ms=50000",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"player",
								"seek"
							],
							"query": [
								{
									"key": "position_ms",
									"value": "50000",
									"description": "**Required** The position in milliseconds to seek to. Must be a positive number."
								}
							]
						},
						"description": "## Description\nSeeks to the given position in the user’s currently playing track.\n\n## Response\n\nA completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. When performing an action that is restricted, `400 BAD REQUEST` will be returned together with an error message."
					},
					"response": [
						{
							"name": "Seek To Position In Currently Playing Track",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt}}",
										"description": "Required. A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details.\nThe access token must have been issued on behalf of a user.\nThe access token must have the user-modify-playback-state scope authorized in order to control playback.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/me/player/seek?position_ms=50000",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"player",
										"seek"
									],
									"query": [
										{
											"key": "position_ms",
											"value": "50000",
											"description": "**Required** The position in milliseconds to seek to. Must be a positive number."
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "97"
								},
								{
									"key": "Date",
									"value": "Fri, 27 Mar 2020 17:45:18 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1585334398"
								},
								{
									"key": "ETag",
									"value": "W/\"2-vyGp6PvFo4RvsFtPoIWeCReyIC8\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Set Repeat Mode On User’s Playback",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}",
								"description": "**Required**\nA valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details.\nThe access token must have been issued on behalf of a user.\nThe access token must have the user-modify-playback-state scope authorized in order to control playback.",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/player/repeat?state=false",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"player",
								"repeat"
							],
							"query": [
								{
									"key": "state",
									"value": "false",
									"description": "**Required**\ntrue: repeat the current track.\nfalse: don't repeat."
								}
							]
						},
						"description": "## Description\r\n\r\nSet the repeat mode for the user’s playback. State Options are: true and false.\r\n\r\n## Response\r\n\r\nA completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. When performing an action that is restricted, `400 BAD REQUEST` will be returned together with an error message."
					},
					"response": [
						{
							"name": "Set Repeat Mode On User’s Playback [DONE]",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt}}",
										"description": "**Required**\nA valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details.\nThe access token must have been issued on behalf of a user.\nThe access token must have the user-modify-playback-state scope authorized in order to control playback.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/me/player/repeat?state=false",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"player",
										"repeat"
									],
									"query": [
										{
											"key": "state",
											"value": "false",
											"description": "**Required**\ntrue: repeat the current track.\nfalse: don't repeat."
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "93"
								},
								{
									"key": "Date",
									"value": "Fri, 27 Mar 2020 18:38:57 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1585337602"
								},
								{
									"key": "ETag",
									"value": "W/\"2-vyGp6PvFo4RvsFtPoIWeCReyIC8\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Set Volume For User's Playback",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}",
								"description": "**Required**\nA valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details.\nThe access token must have been issued on behalf of a user.\nThe access token must have the user-modify-playback-state scope authorized in order to control playback.",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/player/volume?volume_percent=80",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"player",
								"volume"
							],
							"query": [
								{
									"key": "volume_percent",
									"value": "80",
									"description": "**Required**\nInteger. The volume to set. Must be a value from 0 to 100 inclusive."
								}
							]
						},
						"description": "## Description\r\n\r\nSet the volume percentage for the user’s current playback device.\r\n\r\n## Response\r\n\r\nA completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. When performing an action that is restricted, `400 BAD REQUEST` will be returned together with an error message."
					},
					"response": [
						{
							"name": "Set Volume For User's Playback [DONE]",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "**Required**\nA valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details.\nThe access token must have been issued on behalf of a user.\nThe access token must have the user-modify-playback-state scope authorized in order to control playback.",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{jwt}}"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/me/player/volume?volume_percent=80",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"player",
										"volume"
									],
									"query": [
										{
											"key": "volume_percent",
											"value": "80",
											"description": "**Required**\nInteger. The volume to set. Must be a value from 0 to 100 inclusive."
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "92"
								},
								{
									"key": "Date",
									"value": "Fri, 27 Mar 2020 18:39:58 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1585337602"
								},
								{
									"key": "ETag",
									"value": "W/\"2-vyGp6PvFo4RvsFtPoIWeCReyIC8\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Start/Resume a User's Playback",
					"request": {
						"method": "PUT",
						"header": [
							{
								"description": "**Required**\nA valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details.\nThe access token must have been issued on behalf of a user.\nThe access token must have the user-modify-playback-state scope authorized in order to control playback.",
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/me/player/play",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"player",
								"play"
							]
						},
						"description": "## Description\r\n\r\nStart a new context or resume current playback.\r\n\r\n## Response\r\n\r\nA completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. When performing an action that is restricted, `400 BAD REQUEST` will be returned together with an error message."
					},
					"response": [
						{
							"name": "Start/Resume a User's Playback [DONE]",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "**Required**\nA valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details.\nThe access token must have been issued on behalf of a user.\nThe access token must have the user-modify-playback-state scope authorized in order to control playback.",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{jwt}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}api/v1/me/player/play",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"player",
										"play"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "91"
								},
								{
									"key": "Date",
									"value": "Fri, 27 Mar 2020 18:41:08 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1585337602"
								},
								{
									"key": "ETag",
									"value": "W/\"2-vyGp6PvFo4RvsFtPoIWeCReyIC8\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Toggle Shuffle For User’s Playback",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}",
								"description": "**Required**\nA valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details.\nThe access token must have been issued on behalf of a user.\nThe access token must have the user-modify-playback-state scope authorized in order to control playback.",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/player/shuffle?state=true",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"player",
								"shuffle"
							],
							"query": [
								{
									"key": "state",
									"value": "true"
								}
							]
						},
						"description": "## Description\r\n\r\nToggle shuffle on or off for user’s playback.\r\n\r\n## Response\r\n\r\nA completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the Get Information About The User’s Current Playback endpoint to check that your issued command was handled correctly by the player. When performing an action that is restricted, `404 NOT FOUND` or `403 FORBIDDEN` will be returned together with a player error message. For example, if there are no active devices found, the request will return `404 NOT FOUND` response code and the reason `NO_ACTIVE_DEVICE`, or, if the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned together with the `PREMIUM_REQUIRED` reason."
					},
					"response": [
						{
							"name": "Toggle Shuffle For User’s Playback",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt}}",
										"description": "**Required**\nA valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details.\nThe access token must have been issued on behalf of a user.\nThe access token must have the user-modify-playback-state scope authorized in order to control playback.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/me/player/shuffle?state=true&device_id\t=8c6d92c58bd16bdc1c25a2ca4fcc9a95a791c40e",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"player",
										"shuffle"
									],
									"query": [
										{
											"key": "state",
											"value": "true",
											"description": "**Required**\ntrue : Shuffle user’s playback\nfalse : Do not shuffle user’s playback."
										},
										{
											"key": "device_id\t",
											"value": "8c6d92c58bd16bdc1c25a2ca4fcc9a95a791c40e",
											"description": "**Optional**\n The id of the device this command is targeting. If not supplied, the user’s currently active device is the target."
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Cache-Control",
									"value": "private, max-age=0"
								},
								{
									"key": "X-Robots-Tag",
									"value": "noindex, nofollow"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Accept, App-Platform, Authorization, Content-Type, Origin, Retry-After, Spotify-App-Version, X-Cloud-Trace-Context"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST, OPTIONS, PUT, DELETE, PATCH"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Access-Control-Max-Age",
									"value": "604800"
								},
								{
									"key": "content-encoding",
									"value": "gzip"
								},
								{
									"key": "Date",
									"value": "Fri, 06 Mar 2020 00:41:47 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 google"
								},
								{
									"key": "Alt-Svc",
									"value": "clear"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"status\": 403,\n        \"message\": \"Player command failed: Premium required\",\n        \"reason\": \"PREMIUM_REQUIRED\"\n    }\n}"
						}
					]
				},
				{
					"name": "Transfer a User's Playback [NOT DONE]",
					"request": {
						"method": "PUT",
						"header": [
							{
								"description": "**Required**\nA valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details.\nThe access token must have been issued on behalf of a user.\nThe access token must have the user-modify-playback-state scope authorized in order to control playback.",
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"devices_ids\": [\"8c6d92c58bd16bdc1c25a2ca4fcc9a95a791c40e\"],\n\t\"paly\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/me/player",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"player"
							]
						},
						"description": "## Description\r\n\r\nTransfer playback to a new device and determine if it should start playing.\r\n\r\n## Response\r\n\r\nA completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the Get Information About The User’s Current Playback endpoint to check that your issued command was handled correctly by the player. When performing an action that is restricted, `404 NOT FOUND` or `403 FORBIDDEN` will be returned together with a player error message. For example, if there are no active devices found, the request will return `404 NOT FOUND` response code and the reason `NO_ACTIVE_DEVICE`, or, if the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned together with the `PREMIUM_REQUIRED` reason.\r\n\r\n## Body paramaters\r\n\r\n<a href = \"https://developer.spotify.com/documentation/web-api/reference/player/transfer-a-users-playback/\">Body params</a>"
					},
					"response": [
						{
							"name": "Transfer a User's Playback",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "**Required**\nA valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details.\nThe access token must have been issued on behalf of a user.\nThe access token must have the user-modify-playback-state scope authorized in order to control playback.",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{jwt}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"devices_ids\": [\"8c6d92c58bd16bdc1c25a2ca4fcc9a95a791c40e\"],\n\t\"paly\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}api//v1/me/player",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"",
										"v1",
										"me",
										"player"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Cache-Control",
									"value": "private, max-age=0"
								},
								{
									"key": "X-Robots-Tag",
									"value": "noindex, nofollow"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Accept, App-Platform, Authorization, Content-Type, Origin, Retry-After, Spotify-App-Version, X-Cloud-Trace-Context"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST, OPTIONS, PUT, DELETE, PATCH"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Access-Control-Max-Age",
									"value": "604800"
								},
								{
									"key": "content-encoding",
									"value": "gzip"
								},
								{
									"key": "Date",
									"value": "Fri, 06 Mar 2020 09:57:44 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 google"
								},
								{
									"key": "Alt-Svc",
									"value": "clear"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"status\": 403,\n        \"message\": \"Player command failed: Premium required\",\n        \"reason\": \"PREMIUM_REQUIRED\"\n    }\n}"
						}
					]
				},
				{
					"name": "Play Track",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"trackId\": \"5e89e3032e9acf202cc3f28a\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/me/player/track",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"player",
								"track"
							]
						},
						"description": "## Description\n\nRequest sent to acknowledge that a user played a certain track. This is to save the track in his history and update his currently playing playback options.\n\n## Response\n\nA successful request will return a `204 NO CONTENT` response code."
					},
					"response": [
						{
							"name": "play track",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"trackId\": \"5e71de697e4ff73544999698\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}api/v1/me/player/track",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"player",
										"track"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "97"
								},
								{
									"key": "Date",
									"value": "Fri, 27 Mar 2020 19:37:49 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1585341202"
								},
								{
									"key": "ETag",
									"value": "W/\"2-vyGp6PvFo4RvsFtPoIWeCReyIC8\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Establish User Status WebSocket",
					"request": {
						"method": "NONE",
						"header": [],
						"url": {
							"raw": "ws://{{URL}}api/v1/me/player/status?Authorization=Bearer {{jwt}}",
							"protocol": "ws",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"player",
								"status"
							],
							"query": [
								{
									"key": "Authorization",
									"value": "Bearer {{jwt}}"
								}
							]
						},
						"description": "## Description\n\nEstablishing a websocket connection between the user and the server to be able to determine the user online/offline and streaming/NOTstreaming status."
					},
					"response": []
				}
			],
			"description": "Endpoints for retrieving and posting information about the current user music playing actions.",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Playlists",
			"item": [
				{
					"name": "Get a Playlist",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"description": "**Required** A valid JWT access token.",
								"key": "Authorization",
								"type": "text",
								"value": "{{JWT}}"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/playlists/:playlist_id",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"playlists",
								":playlist_id"
							],
							"query": [
								{
									"key": "fields",
									"value": "",
									"description": "**Type:** String\\\n**Optional** Filters for the query: a comma-separated list of the fields to return. If omitted, all fields are returned. For example, to get just the playlist’s description and URI: `fields=description,uri`. A dot separator can be used to specify non-reoccurring fields, while parentheses can be used to specify reoccurring fields within objects. For example, to get just the added date and user ID of the adder: `fields=tracks.items(added_at,added_by.id)`.\\\nUse multiple parentheses to drill down into nested objects, for example:\\\n`fields=tracks.items(track(name,href,album(name,href)))`",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "playlist_id",
									"value": "5e8a3a6e263b6431749b1c2f",
									"description": "**Type:** String\\\n**Required** The Spotify ID for the playlist."
								}
							]
						},
						"description": "## Description\n\nGet a playlist owned by a Spotify user.\n\n## Response\n\nOn success, the response body contains a playlist object in JSON format and the HTTP status code in the response header is `200` OK.\\\nOn error, the header status code is an error code and the response body contains an error object.\\\nRequesting playlists that you do not have the user’s authorization to access returns error `403` Forbidden.\\\nRequesting a playlist that do not exist will return a `404` Not Found."
					},
					"response": [
						{
							"name": "Get a Playlist ✅",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "**Required** A valid JWT access token.",
										"key": "Authorization",
										"type": "text",
										"value": "{{JWT}}"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/playlists/:playlist_id",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"playlists",
										":playlist_id"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "**Type:** String\\\n**Optional** Filters for the query: a comma-separated list of the fields to return. If omitted, all fields are returned. For example, to get just the playlist’s description and URI: `fields=description,uri`. A dot separator can be used to specify non-reoccurring fields, while parentheses can be used to specify reoccurring fields within objects. For example, to get just the added date and user ID of the adder: `fields=tracks.items(added_at,added_by.id)`.\\\nUse multiple parentheses to drill down into nested objects, for example:\\\n`fields=tracks.items(track(name,href,album(name,href)))`",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "playlist_id",
											"value": "5e8a3a6e263b6431749b1c2f",
											"description": "**Type:** String\\\n**Required** The Spotify ID for the playlist."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "90"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Apr 2020 22:14:56 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586128150"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "5023"
								},
								{
									"key": "ETag",
									"value": "W/\"139f-FdRjaa/wyxP0t5oJ6AKUDlOwVFQ\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"tracks\": {\n        \"href\": \"https://api.spotify.com/v1/playlists/5e8a3a6e263b6431749b1c2f/tracks\",\n        \"items\": [\n            {\n                \"is_local\": false,\n                \"_id\": \"5e8a3d7214fc7751301abd87\",\n                \"added_at\": \"2020-04-05T20:20:02.773Z\",\n                \"added_by\": {\n                    \"type\": \"artist\",\n                    \"_id\": \"5e8a399a263b6431749b1c27\",\n                    \"name\": \"Artist Account\",\n                    \"uri\": \"spotify:user:5e8a399a263b6431749b1c27\",\n                    \"id\": \"5e8a399a263b6431749b1c27\"\n                },\n                \"track\": {\n                    \"artists\": [\n                        {\n                            \"external_urls\": [],\n                            \"_id\": \"5e8a399b263b6431749b1c28\",\n                            \"uri\": \"spotify:artist:5e8a399b263b6431749b1c28\",\n                            \"id\": \"5e8a399b263b6431749b1c28\"\n                        }\n                    ],\n                    \"disc_number\": 1,\n                    \"external_urls\": [],\n                    \"name\": \"War Pigs\",\n                    \"album\": {\n                        \"artists\": [\n                            {\n                                \"external_urls\": [],\n                                \"_id\": \"5e8a399b263b6431749b1c28\",\n                                \"uri\": \"spotify:artist:5e8a399b263b6431749b1c28\",\n                                \"id\": \"5e8a399b263b6431749b1c28\"\n                            }\n                        ],\n                        \"album_type\": \"album\",\n                        \"name\": \"Paranoid\",\n                        \"images\": [],\n                        \"uri\": \"spotify:track:5e8a39d1263b6431749b1c2a\",\n                        \"type\": \"album\",\n                        \"href\": \"http://localhost:3000/api/v1/albums/5e8a39d1263b6431749b1c2a\",\n                        \"id\": \"5e8a39d1263b6431749b1c2a\"\n                    },\n                    \"duration_ms\": 5000,\n                    \"explicit\": false,\n                    \"track_number\": 1,\n                    \"__v\": 0,\n                    \"type\": \"track\",\n                    \"uri\": \"spotify:track:5e8a3a16263b6431749b1c2b\",\n                    \"href\": \"http://localhost:3000/api/v1/tracks/5e8a3a16263b6431749b1c2b\",\n                    \"id\": \"5e8a3a16263b6431749b1c2b\"\n                }\n            },\n            {\n                \"is_local\": false,\n                \"_id\": \"5e8a3d7214fc7751301abd86\",\n                \"added_at\": \"2020-04-05T20:20:02.773Z\",\n                \"added_by\": {\n                    \"type\": \"artist\",\n                    \"_id\": \"5e8a399a263b6431749b1c27\",\n                    \"name\": \"Artist Account\",\n                    \"uri\": \"spotify:user:5e8a399a263b6431749b1c27\",\n                    \"id\": \"5e8a399a263b6431749b1c27\"\n                },\n                \"track\": {\n                    \"artists\": [\n                        {\n                            \"external_urls\": [],\n                            \"_id\": \"5e8a399b263b6431749b1c28\",\n                            \"uri\": \"spotify:artist:5e8a399b263b6431749b1c28\",\n                            \"id\": \"5e8a399b263b6431749b1c28\"\n                        }\n                    ],\n                    \"disc_number\": 1,\n                    \"external_urls\": [],\n                    \"name\": \"Paranoid\",\n                    \"album\": {\n                        \"artists\": [\n                            {\n                                \"external_urls\": [],\n                                \"_id\": \"5e8a399b263b6431749b1c28\",\n                                \"uri\": \"spotify:artist:5e8a399b263b6431749b1c28\",\n                                \"id\": \"5e8a399b263b6431749b1c28\"\n                            }\n                        ],\n                        \"album_type\": \"album\",\n                        \"name\": \"Paranoid\",\n                        \"images\": [],\n                        \"uri\": \"spotify:track:5e8a39d1263b6431749b1c2a\",\n                        \"type\": \"album\",\n                        \"href\": \"http://localhost:3000/api/v1/albums/5e8a39d1263b6431749b1c2a\",\n                        \"id\": \"5e8a39d1263b6431749b1c2a\"\n                    },\n                    \"duration_ms\": 5000,\n                    \"explicit\": false,\n                    \"track_number\": 2,\n                    \"__v\": 0,\n                    \"type\": \"track\",\n                    \"uri\": \"spotify:track:5e8a3a1e263b6431749b1c2c\",\n                    \"href\": \"http://localhost:3000/api/v1/tracks/5e8a3a1e263b6431749b1c2c\",\n                    \"id\": \"5e8a3a1e263b6431749b1c2c\"\n                }\n            },\n            {\n                \"is_local\": false,\n                \"_id\": \"5e8a3d7214fc7751301abd85\",\n                \"added_at\": \"2020-04-05T20:20:02.773Z\",\n                \"added_by\": {\n                    \"type\": \"artist\",\n                    \"_id\": \"5e8a399a263b6431749b1c27\",\n                    \"name\": \"Artist Account\",\n                    \"uri\": \"spotify:user:5e8a399a263b6431749b1c27\",\n                    \"id\": \"5e8a399a263b6431749b1c27\"\n                },\n                \"track\": {\n                    \"artists\": [\n                        {\n                            \"external_urls\": [],\n                            \"_id\": \"5e8a399b263b6431749b1c28\",\n                            \"uri\": \"spotify:artist:5e8a399b263b6431749b1c28\",\n                            \"id\": \"5e8a399b263b6431749b1c28\"\n                        }\n                    ],\n                    \"disc_number\": 1,\n                    \"external_urls\": [],\n                    \"name\": \"Planet Caravan\",\n                    \"album\": {\n                        \"artists\": [\n                            {\n                                \"external_urls\": [],\n                                \"_id\": \"5e8a399b263b6431749b1c28\",\n                                \"uri\": \"spotify:artist:5e8a399b263b6431749b1c28\",\n                                \"id\": \"5e8a399b263b6431749b1c28\"\n                            }\n                        ],\n                        \"album_type\": \"album\",\n                        \"name\": \"Paranoid\",\n                        \"images\": [],\n                        \"uri\": \"spotify:track:5e8a39d1263b6431749b1c2a\",\n                        \"type\": \"album\",\n                        \"href\": \"http://localhost:3000/api/v1/albums/5e8a39d1263b6431749b1c2a\",\n                        \"id\": \"5e8a39d1263b6431749b1c2a\"\n                    },\n                    \"duration_ms\": 5000,\n                    \"explicit\": false,\n                    \"track_number\": 3,\n                    \"__v\": 0,\n                    \"type\": \"track\",\n                    \"uri\": \"spotify:track:5e8a3a2c263b6431749b1c2d\",\n                    \"href\": \"http://localhost:3000/api/v1/tracks/5e8a3a2c263b6431749b1c2d\",\n                    \"id\": \"5e8a3a2c263b6431749b1c2d\"\n                }\n            },\n            {\n                \"is_local\": false,\n                \"_id\": \"5e8a3d7214fc7751301abd84\",\n                \"added_at\": \"2020-04-05T20:20:02.773Z\",\n                \"added_by\": {\n                    \"type\": \"artist\",\n                    \"_id\": \"5e8a399a263b6431749b1c27\",\n                    \"name\": \"Artist Account\",\n                    \"uri\": \"spotify:user:5e8a399a263b6431749b1c27\",\n                    \"id\": \"5e8a399a263b6431749b1c27\"\n                },\n                \"track\": {\n                    \"artists\": [\n                        {\n                            \"external_urls\": [],\n                            \"_id\": \"5e8a399b263b6431749b1c28\",\n                            \"uri\": \"spotify:artist:5e8a399b263b6431749b1c28\",\n                            \"id\": \"5e8a399b263b6431749b1c28\"\n                        }\n                    ],\n                    \"disc_number\": 1,\n                    \"external_urls\": [],\n                    \"name\": \"Iron Man\",\n                    \"album\": {\n                        \"artists\": [\n                            {\n                                \"external_urls\": [],\n                                \"_id\": \"5e8a399b263b6431749b1c28\",\n                                \"uri\": \"spotify:artist:5e8a399b263b6431749b1c28\",\n                                \"id\": \"5e8a399b263b6431749b1c28\"\n                            }\n                        ],\n                        \"album_type\": \"album\",\n                        \"name\": \"Paranoid\",\n                        \"images\": [],\n                        \"uri\": \"spotify:track:5e8a39d1263b6431749b1c2a\",\n                        \"type\": \"album\",\n                        \"href\": \"http://localhost:3000/api/v1/albums/5e8a39d1263b6431749b1c2a\",\n                        \"id\": \"5e8a39d1263b6431749b1c2a\"\n                    },\n                    \"duration_ms\": 5000,\n                    \"explicit\": false,\n                    \"track_number\": 4,\n                    \"__v\": 0,\n                    \"type\": \"track\",\n                    \"uri\": \"spotify:track:5e8a3a33263b6431749b1c2e\",\n                    \"href\": \"http://localhost:3000/api/v1/tracks/5e8a3a33263b6431749b1c2e\",\n                    \"id\": \"5e8a3a33263b6431749b1c2e\"\n                }\n            }\n        ],\n        \"limit\": 100,\n        \"offset\": 0\n    },\n    \"collaborative\": false,\n    \"public\": true,\n    \"followers\": 0,\n    \"collaborators\": [],\n    \"_id\": \"5e8a3a6e263b6431749b1c2f\",\n    \"name\": \"Black Sabbath fav Tracks\",\n    \"description\": \"Contains my favourite Black Sabbath Tracks\",\n    \"owner\": {\n        \"type\": \"artist\",\n        \"image\": null,\n        \"followers\": 0,\n        \"name\": \"Artist Account\",\n        \"uri\": \"spotify:user:5e8a399a263b6431749b1c27\",\n        \"id\": \"5e8a399a263b6431749b1c27\"\n    },\n    \"images\": [],\n    \"__v\": 1,\n    \"type\": \"playlist\",\n    \"uri\": \"spotify:playlist:5e8a3a6e263b6431749b1c2f\",\n    \"href\": \"http://localhost:3000/api/v1/users/spotify/playlists/5e8a3a6e263b6431749b1c2f\",\n    \"external_urls\": {\n        \"spotify\": \"http://open.spotify.com/user/spotify/playlist/5e8a3a6e263b6431749b1c2f\"\n    },\n    \"id\": \"5e8a3a6e263b6431749b1c2f\"\n}"
						}
					]
				},
				{
					"name": "Get a Playlist's Tracks",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"description": "**Required** A valid JWT access token.",
								"key": "Authorization",
								"type": "text",
								"value": "{{JWT}}"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/playlists/:playlist_id/tracks?limit=&offset=",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"playlists",
								":playlist_id",
								"tracks"
							],
							"query": [
								{
									"key": "fields",
									"value": "",
									"description": "**Type:** String\\\n**Optional** Filters for the query: a comma-separated list of the fields to return. If omitted, all fields are returned. For example, to get just the total number of tracks and the request limit:\\\n`fields=total,limit`\\\n\\\nA dot separator can be used to specify non-reoccurring fields, while parentheses can be used to specify reoccurring fields within objects. For example, to get just the added date and user ID of the adder:\\\n`fields=items(added_at,added_by.id)`\\\n\\\nUse multiple parentheses to drill down into nested objects, for example:\n`fields=items(track(name,href,album(name,href)))`",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "",
									"description": "**Type:** Integer\\\n**Optional** The maximum number of tracks to return.\\\n**Default:** 100.\\\n**Minimum:** 1\\\n**Maximum:** 100."
								},
								{
									"key": "offset",
									"value": "",
									"description": "**Type**: Integer\\\n**Optional** The index of the first track to return.\\\n**Default:** 0 (the first object)."
								}
							],
							"variable": [
								{
									"key": "playlist_id",
									"value": "5e8a3a6e263b6431749b1c2f",
									"description": "**Type:** String\\\n**Required** The Spotify ID for the playlist."
								}
							]
						},
						"description": "## Description\n\nGet full details of the tracks of a playlist owned by a Spotify user.\n\n## Response\n\nOn success, the response body contains an array of playlist track objects (wrapped in a paging object) in JSON format and the HTTP status code in the response header is `200` OK.\\\nOn error, the header status code is an error code and the response body contains an error object.\\\nRequesting playlists that you do not have the user’s authorization to access returns error `403` Forbidden.\\\nRequesting a playlist that do not exist will return a `404` Not Found."
					},
					"response": [
						{
							"name": "Get a Playlist's Tracks ✅",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "**Required** A valid JWT access token.",
										"key": "Authorization",
										"type": "text",
										"value": "{{JWT}}"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/playlists/:playlist_id/tracks?limit=100&offset=0",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"playlists",
										":playlist_id",
										"tracks"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "**Type:** String\\\n**Optional** Filters for the query: a comma-separated list of the fields to return. If omitted, all fields are returned. For example, to get just the total number of tracks and the request limit:\\\n`fields=total,limit`\\\n\\\nA dot separator can be used to specify non-reoccurring fields, while parentheses can be used to specify reoccurring fields within objects. For example, to get just the added date and user ID of the adder:\\\n`fields=items(added_at,added_by.id)`\\\n\\\nUse multiple parentheses to drill down into nested objects, for example:\n`fields=items(track(name,href,album(name,href)))`",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "100",
											"description": "**Type:** Integer\\\n**Optional** The maximum number of tracks to return.\\\n**Default:** 100.\\\n**Minimum:** 1\\\n**Maximum:** 100."
										},
										{
											"key": "offset",
											"value": "0",
											"description": "**Type**: Integer\\\n**Optional** The index of the first track to return.\\\n**Default:** 0 (the first object)."
										}
									],
									"variable": [
										{
											"key": "playlist_id",
											"value": "5e8a3a6e263b6431749b1c2f",
											"description": "**Type:** String\\\n**Required** The Spotify ID for the playlist."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "91"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Apr 2020 22:14:47 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586128150"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "4354"
								},
								{
									"key": "ETag",
									"value": "W/\"1102-DGE273MIcHloFdkjKx3DwRrItW0\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"href\": \"https://api.spotify.com/v1/playlists/5e8a3a6e263b6431749b1c2f/tracks\",\n    \"items\": [\n        {\n            \"is_local\": false,\n            \"_id\": \"5e8a3d7214fc7751301abd87\",\n            \"added_at\": \"2020-04-05T20:20:02.773Z\",\n            \"added_by\": {\n                \"type\": \"artist\",\n                \"_id\": \"5e8a399a263b6431749b1c27\",\n                \"name\": \"Artist Account\",\n                \"uri\": \"spotify:user:5e8a399a263b6431749b1c27\",\n                \"id\": \"5e8a399a263b6431749b1c27\"\n            },\n            \"track\": {\n                \"artists\": [\n                    {\n                        \"external_urls\": [],\n                        \"_id\": \"5e8a399b263b6431749b1c28\",\n                        \"uri\": \"spotify:artist:5e8a399b263b6431749b1c28\",\n                        \"id\": \"5e8a399b263b6431749b1c28\"\n                    }\n                ],\n                \"disc_number\": 1,\n                \"external_urls\": [],\n                \"name\": \"War Pigs\",\n                \"album\": {\n                    \"artists\": [\n                        {\n                            \"external_urls\": [],\n                            \"_id\": \"5e8a399b263b6431749b1c28\",\n                            \"uri\": \"spotify:artist:5e8a399b263b6431749b1c28\",\n                            \"id\": \"5e8a399b263b6431749b1c28\"\n                        }\n                    ],\n                    \"album_type\": \"album\",\n                    \"name\": \"Paranoid\",\n                    \"images\": [],\n                    \"uri\": \"spotify:track:5e8a39d1263b6431749b1c2a\",\n                    \"type\": \"album\",\n                    \"href\": \"http://localhost:3000/api/v1/albums/5e8a39d1263b6431749b1c2a\",\n                    \"id\": \"5e8a39d1263b6431749b1c2a\"\n                },\n                \"duration_ms\": 5000,\n                \"explicit\": false,\n                \"track_number\": 1,\n                \"__v\": 0,\n                \"type\": \"track\",\n                \"uri\": \"spotify:track:5e8a3a16263b6431749b1c2b\",\n                \"href\": \"http://localhost:3000/api/v1/tracks/5e8a3a16263b6431749b1c2b\",\n                \"id\": \"5e8a3a16263b6431749b1c2b\"\n            }\n        },\n        {\n            \"is_local\": false,\n            \"_id\": \"5e8a3d7214fc7751301abd86\",\n            \"added_at\": \"2020-04-05T20:20:02.773Z\",\n            \"added_by\": {\n                \"type\": \"artist\",\n                \"_id\": \"5e8a399a263b6431749b1c27\",\n                \"name\": \"Artist Account\",\n                \"uri\": \"spotify:user:5e8a399a263b6431749b1c27\",\n                \"id\": \"5e8a399a263b6431749b1c27\"\n            },\n            \"track\": {\n                \"artists\": [\n                    {\n                        \"external_urls\": [],\n                        \"_id\": \"5e8a399b263b6431749b1c28\",\n                        \"uri\": \"spotify:artist:5e8a399b263b6431749b1c28\",\n                        \"id\": \"5e8a399b263b6431749b1c28\"\n                    }\n                ],\n                \"disc_number\": 1,\n                \"external_urls\": [],\n                \"name\": \"Paranoid\",\n                \"album\": {\n                    \"artists\": [\n                        {\n                            \"external_urls\": [],\n                            \"_id\": \"5e8a399b263b6431749b1c28\",\n                            \"uri\": \"spotify:artist:5e8a399b263b6431749b1c28\",\n                            \"id\": \"5e8a399b263b6431749b1c28\"\n                        }\n                    ],\n                    \"album_type\": \"album\",\n                    \"name\": \"Paranoid\",\n                    \"images\": [],\n                    \"uri\": \"spotify:track:5e8a39d1263b6431749b1c2a\",\n                    \"type\": \"album\",\n                    \"href\": \"http://localhost:3000/api/v1/albums/5e8a39d1263b6431749b1c2a\",\n                    \"id\": \"5e8a39d1263b6431749b1c2a\"\n                },\n                \"duration_ms\": 5000,\n                \"explicit\": false,\n                \"track_number\": 2,\n                \"__v\": 0,\n                \"type\": \"track\",\n                \"uri\": \"spotify:track:5e8a3a1e263b6431749b1c2c\",\n                \"href\": \"http://localhost:3000/api/v1/tracks/5e8a3a1e263b6431749b1c2c\",\n                \"id\": \"5e8a3a1e263b6431749b1c2c\"\n            }\n        },\n        {\n            \"is_local\": false,\n            \"_id\": \"5e8a3d7214fc7751301abd85\",\n            \"added_at\": \"2020-04-05T20:20:02.773Z\",\n            \"added_by\": {\n                \"type\": \"artist\",\n                \"_id\": \"5e8a399a263b6431749b1c27\",\n                \"name\": \"Artist Account\",\n                \"uri\": \"spotify:user:5e8a399a263b6431749b1c27\",\n                \"id\": \"5e8a399a263b6431749b1c27\"\n            },\n            \"track\": {\n                \"artists\": [\n                    {\n                        \"external_urls\": [],\n                        \"_id\": \"5e8a399b263b6431749b1c28\",\n                        \"uri\": \"spotify:artist:5e8a399b263b6431749b1c28\",\n                        \"id\": \"5e8a399b263b6431749b1c28\"\n                    }\n                ],\n                \"disc_number\": 1,\n                \"external_urls\": [],\n                \"name\": \"Planet Caravan\",\n                \"album\": {\n                    \"artists\": [\n                        {\n                            \"external_urls\": [],\n                            \"_id\": \"5e8a399b263b6431749b1c28\",\n                            \"uri\": \"spotify:artist:5e8a399b263b6431749b1c28\",\n                            \"id\": \"5e8a399b263b6431749b1c28\"\n                        }\n                    ],\n                    \"album_type\": \"album\",\n                    \"name\": \"Paranoid\",\n                    \"images\": [],\n                    \"uri\": \"spotify:track:5e8a39d1263b6431749b1c2a\",\n                    \"type\": \"album\",\n                    \"href\": \"http://localhost:3000/api/v1/albums/5e8a39d1263b6431749b1c2a\",\n                    \"id\": \"5e8a39d1263b6431749b1c2a\"\n                },\n                \"duration_ms\": 5000,\n                \"explicit\": false,\n                \"track_number\": 3,\n                \"__v\": 0,\n                \"type\": \"track\",\n                \"uri\": \"spotify:track:5e8a3a2c263b6431749b1c2d\",\n                \"href\": \"http://localhost:3000/api/v1/tracks/5e8a3a2c263b6431749b1c2d\",\n                \"id\": \"5e8a3a2c263b6431749b1c2d\"\n            }\n        },\n        {\n            \"is_local\": false,\n            \"_id\": \"5e8a3d7214fc7751301abd84\",\n            \"added_at\": \"2020-04-05T20:20:02.773Z\",\n            \"added_by\": {\n                \"type\": \"artist\",\n                \"_id\": \"5e8a399a263b6431749b1c27\",\n                \"name\": \"Artist Account\",\n                \"uri\": \"spotify:user:5e8a399a263b6431749b1c27\",\n                \"id\": \"5e8a399a263b6431749b1c27\"\n            },\n            \"track\": {\n                \"artists\": [\n                    {\n                        \"external_urls\": [],\n                        \"_id\": \"5e8a399b263b6431749b1c28\",\n                        \"uri\": \"spotify:artist:5e8a399b263b6431749b1c28\",\n                        \"id\": \"5e8a399b263b6431749b1c28\"\n                    }\n                ],\n                \"disc_number\": 1,\n                \"external_urls\": [],\n                \"name\": \"Iron Man\",\n                \"album\": {\n                    \"artists\": [\n                        {\n                            \"external_urls\": [],\n                            \"_id\": \"5e8a399b263b6431749b1c28\",\n                            \"uri\": \"spotify:artist:5e8a399b263b6431749b1c28\",\n                            \"id\": \"5e8a399b263b6431749b1c28\"\n                        }\n                    ],\n                    \"album_type\": \"album\",\n                    \"name\": \"Paranoid\",\n                    \"images\": [],\n                    \"uri\": \"spotify:track:5e8a39d1263b6431749b1c2a\",\n                    \"type\": \"album\",\n                    \"href\": \"http://localhost:3000/api/v1/albums/5e8a39d1263b6431749b1c2a\",\n                    \"id\": \"5e8a39d1263b6431749b1c2a\"\n                },\n                \"duration_ms\": 5000,\n                \"explicit\": false,\n                \"track_number\": 4,\n                \"__v\": 0,\n                \"type\": \"track\",\n                \"uri\": \"spotify:track:5e8a3a33263b6431749b1c2e\",\n                \"href\": \"http://localhost:3000/api/v1/tracks/5e8a3a33263b6431749b1c2e\",\n                \"id\": \"5e8a3a33263b6431749b1c2e\"\n            }\n        }\n    ],\n    \"limit\": 100,\n    \"offset\": 0\n}"
						}
					]
				},
				{
					"name": "Get a Playlist Cover Image",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"description": "**Required** A valid JWT access token.",
								"key": "Authorization",
								"type": "text",
								"value": "{{JWT}}"
							},
							{
								"key": "Content-Type",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/playlists/:playlist_id/images",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"playlists",
								":playlist_id",
								"images"
							],
							"variable": [
								{
									"key": "playlist_id",
									"value": "5e8a3a6e263b6431749b1c2f",
									"description": "**Type:** String\\\n**Required** The Spotify ID for the playlist."
								}
							]
						},
						"description": "## Description\n\nGet the custom image associated with a specific playlist if it exists.\n\n## Response\n\nOn success, the response body contains a list of image objects in JSON format and the HTTP status code in the response header is `200` OK\\\nOn error, the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Get a Playlist Cover Image",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "**Required** A valid JWT access token.",
										"key": "Authorization",
										"type": "text",
										"value": "{{JWT}}"
									},
									{
										"key": "Content-Type",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/playlists/:playlist_id/images",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"playlists",
										":playlist_id",
										"images"
									],
									"variable": [
										{
											"key": "playlist_id",
											"value": "5e7ba9d5f35f503b784bc395",
											"description": "**Type:** String\\\n**Required** The Spotify ID for the playlist."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "94"
								},
								{
									"key": "Date",
									"value": "Sun, 29 Mar 2020 22:41:48 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1585524948"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "113"
								},
								{
									"key": "ETag",
									"value": "W/\"71-mmQ/sxDApTVQdzWAARHmjZj23mU\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"url\": \"./public/img/playlists/playlist-5e7ba9d5f35f503b784bc395-1585521349455.jpeg\",\n        \"width\": 720,\n        \"height\": 1280\n    }\n]"
						}
					]
				},
				{
					"name": "Create a Playlist",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "**Required** A valid JWT access token.",
								"key": "Authorization",
								"type": "text",
								"value": "{{JWT}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							},
							{
								"description": "**Required** The content type of the request body: `application/json`",
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Black Sabbath fav Tracks\",\n\t\"description\": \"Contains my favourite Black Sabbath Tracks\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/users/playlists",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"users",
								"playlists"
							]
						},
						"description": "## Description\n\nCreate a playlist for a Spotify user. (The playlist will be empty until you add tracks.)\n\n## Response\n\nOn success, the response body contains the created playlist object in JSON format and the HTTP status code in the response header is `201` Created.\n\nOn error, the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Create a Playlist",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "**Required** A valid JWT access token.",
										"key": "Authorization",
										"type": "text",
										"value": "{{JWT}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"description": "**Required** The content type of the request body: `application/json`",
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Walid Test Playlist\",\n\t\"public\": \"true\",\n\t\"description\": \"description\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{URL}}api/v1/users/playlists",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"users",
										"playlists"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "93"
								},
								{
									"key": "Date",
									"value": "Sun, 29 Mar 2020 22:43:36 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1585524948"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "586"
								},
								{
									"key": "ETag",
									"value": "W/\"24a-FH8nsDqXjNRg+X1RmVunHisCy0U\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"tracks\": {\n        \"items\": [],\n        \"href\": \"http://localhost:3000/api/v1/users/spotify/playlists/5e8124983d59f24c544fa18a/tracks\"\n    },\n    \"collaborative\": false,\n    \"public\": true,\n    \"followers\": 0,\n    \"collaborators\": [],\n    \"name\": \"Walid Test Playlist\",\n    \"description\": \"description\",\n    \"owner\": \"5e8111f6d23b113f4018ab62\",\n    \"images\": [],\n    \"__v\": 0,\n    \"type\": \"playlist\",\n    \"uri\": \"spotify:playlist:5e8124983d59f24c544fa18a\",\n    \"href\": \"http://localhost:3000/api/v1/users/spotify/playlists/5e8124983d59f24c544fa18a\",\n    \"external_urls\": {\n        \"spotify\": \"http://open.spotify.com/user/spotify/playlist/5e8124983d59f24c544fa18a\"\n    },\n    \"id\": \"5e8124983d59f24c544fa18a\"\n}"
						}
					]
				},
				{
					"name": "Add Tracks to a Playlist",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "**Required** A valid JWT access token.",
								"key": "Authorization",
								"type": "text",
								"value": "{{JWT}}"
							},
							{
								"description": "**Required** The content type of the request body: `application/json`",
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"ids\": [\"5e8a3a16263b6431749b1c2b\", \"5e8a3a1e263b6431749b1c2c\", \"5e8a3a2c263b6431749b1c2d\", \"5e8a3a33263b6431749b1c2e\"]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/playlists/:playlist_id/tracks",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"playlists",
								":playlist_id",
								"tracks"
							],
							"variable": [
								{
									"key": "playlist_id",
									"value": "5e8a3a6e263b6431749b1c2f",
									"description": "**Type:** string\\\n**Required** The Spotify ID for the playlist."
								}
							]
						},
						"description": "## Description\n\nAdd one or more tracks to a user’s playlist\n\n## Response\n\nOn success, the HTTP status code in the response header is `201` Created.\\\nOn error, the header status code is an error code and the response body contains an error object.\\\nTrying to add a track when you do not have the user’s authorization, or when there are more than 10,000 tracks in the playlist, returns error `403` Forbidden."
					},
					"response": [
						{
							"name": "Add Tracks to a Playlist",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "**Required** A valid JWT access token.",
										"key": "Authorization",
										"type": "text",
										"value": "{{JWT}}"
									},
									{
										"description": "**Required** The content type of the request body: `application/json`",
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ids\": [\"5e8a3a16263b6431749b1c2b\", \"5e8a3a1e263b6431749b1c2c\", \"5e8a3a2c263b6431749b1c2d\", \"5e8a3a33263b6431749b1c2e\"]\n}",
									"options": {
										"formdata": {}
									}
								},
								"url": {
									"raw": "{{URL}}api/v1/playlists/:playlist_id/tracks",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"playlists",
										":playlist_id",
										"tracks"
									],
									"variable": [
										{
											"key": "playlist_id",
											"value": "5e8a3a6e263b6431749b1c2f",
											"description": "**Type:** string\\\n**Required** The Spotify ID for the playlist."
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "95"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Apr 2020 22:54:53 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586128785"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Content-Length",
									"value": "0"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get a List of a User's Playlists",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT}}",
								"description": "**Required** A valid JWT access token.",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/users/:user_id/playlists?limit=&offset=",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"users",
								":user_id",
								"playlists"
							],
							"query": [
								{
									"key": "limit",
									"value": "",
									"description": "**Type:** integer\\\n**Optional** The maximum number of playlists to return. \\\n**Default:** 20.\\\n**Minimum:** 1.\\\n**Maximum:** 50."
								},
								{
									"key": "offset",
									"value": "",
									"description": "**Type:** integer\\\n**Optional** The index of the first playlist to return.\\\n**Default:** 0 (the first object).\\\n**Maximum offset:** 100.000. Use with `limit` to get the next set of playlists."
								}
							],
							"variable": [
								{
									"key": "user_id",
									"value": "5e8a399a263b6431749b1c27",
									"description": "**Type:** string\\\n**Required** The user’s Spotify user ID."
								}
							]
						},
						"description": "## Description\nGet a list of the playlists owned or followed by a Spotify user.\n\n## Response\nOn success, the HTTP status code in the response header is `200` OK and the response body contains an array of simplified playlist objects (wrapped in a paging object) in JSON format. On error, the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Get a List of a User's Playlists ✅",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{JWT}}",
										"description": "**Required** A valid JWT access token.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/users/:user_id/playlists?limit=&offset=",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"users",
										":user_id",
										"playlists"
									],
									"query": [
										{
											"key": "limit",
											"value": "",
											"description": "**Type:** integer\\\n**Optional** The maximum number of playlists to return. \\\n**Default:** 20.\\\n**Minimum:** 1.\\\n**Maximum:** 50."
										},
										{
											"key": "offset",
											"value": "",
											"description": "**Type:** integer\\\n**Optional** The index of the first playlist to return.\\\n**Default:** 0 (the first object).\\\n**Maximum offset:** 100.000. Use with `limit` to get the next set of playlists."
										}
									],
									"variable": [
										{
											"key": "user_id",
											"value": "5e8a399a263b6431749b1c27",
											"description": "**Type:** string\\\n**Required** The user’s Spotify user ID."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "99"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Apr 2020 23:36:12 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586133367"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "1456"
								},
								{
									"key": "ETag",
									"value": "W/\"5b0-G7VnPeu9djOtZ5WNG+d2u8iQmB4\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"href\": \"https://api.spotify.com/v1/users/5e8a399a263b6431749b1c27/playlists\",\n    \"items\": [\n        {\n            \"collaborative\": false,\n            \"public\": true,\n            \"name\": \"Black Sabbath fav tracks\",\n            \"description\": \"Contains my favourite Black Sabbath Tracks\",\n            \"owner\": {\n                \"type\": \"artist\",\n                \"_id\": \"5e8a399a263b6431749b1c27\",\n                \"uri\": \"spotify:user:5e8a399a263b6431749b1c27\",\n                \"id\": \"5e8a399a263b6431749b1c27\"\n            },\n            \"images\": [],\n            \"type\": \"playlist\",\n            \"uri\": \"spotify:playlist:5e8a3a6e263b6431749b1c2f\",\n            \"href\": \"http://localhost:3000/api/v1/users/spotify/playlists/5e8a3a6e263b6431749b1c2f\",\n            \"tracks\": {\n                \"href\": \"http://localhost:3000/api/v1/users/spotify/playlists/5e8a3a6e263b6431749b1c2f/tracks\"\n            },\n            \"external_urls\": {\n                \"spotify\": \"http://open.spotify.com/user/spotify/playlist/5e8a3a6e263b6431749b1c2f\"\n            },\n            \"id\": \"5e8a3a6e263b6431749b1c2f\"\n        },\n        {\n            \"collaborative\": false,\n            \"public\": true,\n            \"name\": \"Black Sabbath fav Tracks\",\n            \"description\": \"Contains my favourite Black Sabbath Tracks\",\n            \"owner\": {\n                \"type\": \"artist\",\n                \"_id\": \"5e8a399a263b6431749b1c27\",\n                \"uri\": \"spotify:user:5e8a399a263b6431749b1c27\",\n                \"id\": \"5e8a399a263b6431749b1c27\"\n            },\n            \"images\": [],\n            \"type\": \"playlist\",\n            \"uri\": \"spotify:playlist:5e8a5e3888998251a421b882\",\n            \"href\": \"http://localhost:3000/api/v1/users/spotify/playlists/5e8a5e3888998251a421b882\",\n            \"tracks\": {\n                \"href\": \"http://localhost:3000/api/v1/users/spotify/playlists/5e8a5e3888998251a421b882/tracks\"\n            },\n            \"external_urls\": {\n                \"spotify\": \"http://open.spotify.com/user/spotify/playlist/5e8a5e3888998251a421b882\"\n            },\n            \"id\": \"5e8a5e3888998251a421b882\"\n        }\n    ],\n    \"limit\": 20,\n    \"offset\": 0\n}"
						}
					]
				},
				{
					"name": "Get a List of Current User's Playlists",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"description": "**Required** A valid JWT access token.",
								"key": "Authorization",
								"type": "text",
								"value": "{{JWT}}"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/me/playlists?limit=&offset=",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"me",
								"playlists"
							],
							"query": [
								{
									"key": "limit",
									"value": "",
									"description": "**Type:** Integer\\\n**Optional** The maximum number of playlists to return.\\\n**Default:** 100.\\\n**Minimum:** 1\\\n**Maximum:** 50."
								},
								{
									"key": "offset",
									"value": "",
									"description": "**Type**: Integer\\\n**Optional** The index of the first track to return.\\\n**Default:** 0 (the first object).\\\n**Maximum offset:** 100,000.\\\nUse with `limit` to get the next set of playlists.\n"
								}
							]
						},
						"description": "## Description\n\nGet a list of the playlists owned or followed by the current Spotify user.\n\n## Response\n\nOn success, the HTTP status code in the response header is `200` OK and the response body contains an array of simplified playlist objects (wrapped in a paging object) in JSON format.\\\nOn error, the header status code is an error code and the response body contains an error object. Please note that the access token has to be tied to a user."
					},
					"response": [
						{
							"name": "Get a List of Current User's Playlists✅",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "**Required** A valid JWT access token.",
										"key": "Authorization",
										"type": "text",
										"value": "{{JWT}}"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/me/playlists?limit=&offset=",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"me",
										"playlists"
									],
									"query": [
										{
											"key": "limit",
											"value": "",
											"description": "**Type:** Integer\\\n**Optional** The maximum number of playlists to return.\\\n**Default:** 100.\\\n**Minimum:** 1\\\n**Maximum:** 50."
										},
										{
											"key": "offset",
											"value": "",
											"description": "**Type**: Integer\\\n**Optional** The index of the first track to return.\\\n**Default:** 0 (the first object).\\\n**Maximum offset:** 100,000.\\\nUse with `limit` to get the next set of playlists.\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "98"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Apr 2020 23:36:30 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586133367"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "1456"
								},
								{
									"key": "ETag",
									"value": "W/\"5b0-G7VnPeu9djOtZ5WNG+d2u8iQmB4\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"href\": \"https://api.spotify.com/v1/users/5e8a399a263b6431749b1c27/playlists\",\n    \"items\": [\n        {\n            \"collaborative\": false,\n            \"public\": true,\n            \"name\": \"Black Sabbath fav tracks\",\n            \"description\": \"Contains my favourite Black Sabbath Tracks\",\n            \"owner\": {\n                \"type\": \"artist\",\n                \"_id\": \"5e8a399a263b6431749b1c27\",\n                \"uri\": \"spotify:user:5e8a399a263b6431749b1c27\",\n                \"id\": \"5e8a399a263b6431749b1c27\"\n            },\n            \"images\": [],\n            \"type\": \"playlist\",\n            \"uri\": \"spotify:playlist:5e8a3a6e263b6431749b1c2f\",\n            \"href\": \"http://localhost:3000/api/v1/users/spotify/playlists/5e8a3a6e263b6431749b1c2f\",\n            \"tracks\": {\n                \"href\": \"http://localhost:3000/api/v1/users/spotify/playlists/5e8a3a6e263b6431749b1c2f/tracks\"\n            },\n            \"external_urls\": {\n                \"spotify\": \"http://open.spotify.com/user/spotify/playlist/5e8a3a6e263b6431749b1c2f\"\n            },\n            \"id\": \"5e8a3a6e263b6431749b1c2f\"\n        },\n        {\n            \"collaborative\": false,\n            \"public\": true,\n            \"name\": \"Black Sabbath fav Tracks\",\n            \"description\": \"Contains my favourite Black Sabbath Tracks\",\n            \"owner\": {\n                \"type\": \"artist\",\n                \"_id\": \"5e8a399a263b6431749b1c27\",\n                \"uri\": \"spotify:user:5e8a399a263b6431749b1c27\",\n                \"id\": \"5e8a399a263b6431749b1c27\"\n            },\n            \"images\": [],\n            \"type\": \"playlist\",\n            \"uri\": \"spotify:playlist:5e8a5e3888998251a421b882\",\n            \"href\": \"http://localhost:3000/api/v1/users/spotify/playlists/5e8a5e3888998251a421b882\",\n            \"tracks\": {\n                \"href\": \"http://localhost:3000/api/v1/users/spotify/playlists/5e8a5e3888998251a421b882/tracks\"\n            },\n            \"external_urls\": {\n                \"spotify\": \"http://open.spotify.com/user/spotify/playlist/5e8a5e3888998251a421b882\"\n            },\n            \"id\": \"5e8a5e3888998251a421b882\"\n        }\n    ],\n    \"limit\": 20,\n    \"offset\": 0\n}"
						}
					]
				},
				{
					"name": "Change a Playlist's Details",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"description": "**Required** A valid JWT access token.",
								"key": "Authorization",
								"type": "text",
								"value": "{{JWT}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"description": "**Required** The content type of the request body: `application/json`",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Black Sabbath fav tracks\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/playlists/:playlist_id",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"playlists",
								":playlist_id"
							],
							"variable": [
								{
									"key": "playlist_id",
									"value": "5e8a3a6e263b6431749b1c2f",
									"description": "**Type:** string\\\n**Required** The Spotify ID for the playlist."
								}
							]
						},
						"description": "## Description\nChange a playlist’s name and public/private state. (The user must, of course, own the playlist.)\n\n## Response\nOn success the HTTP status code in the response header is `200` OK.\\\nOn error, the header status code is an error code and the response body contains an error object. Trying to change a playlist when you do not have the user’s authorization returns error `403` Forbidden.\n\n## Fields\n`name`: **String** The name of the playlist\\\n`description`: **String** The description of the playlist\\\n`collaborative`: **Boolean** Whether the playlist is collaborative or not\\\n`public`: **Boolean** Whether the playlist is public or not"
					},
					"response": [
						{
							"name": "Change a Playlist's Details ✅",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "**Required** A valid JWT access token.",
										"key": "Authorization",
										"type": "text",
										"value": "{{JWT}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"description": "**Required** The content type of the request body: `application/json`",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Black Sabbath fav tracks\"\n}",
									"options": {
										"formdata": {}
									}
								},
								"url": {
									"raw": "{{URL}}api/v1/playlists/:playlist_id",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"playlists",
										":playlist_id"
									],
									"variable": [
										{
											"key": "playlist_id",
											"value": "5e8a3a6e263b6431749b1c2f",
											"description": "**Type:** string\\\n**Required** The Spotify ID for the playlist."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "99"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Apr 2020 23:24:42 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586132672"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Content-Length",
									"value": "0"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Remove Tracks from a Playlist",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"description": "**Required** A valid JWT access token.",
								"key": "Authorization",
								"type": "text",
								"value": "{{JWT}}"
							},
							{
								"description": "**Required** The content type of the request body: `application/json`",
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"tracks\": [{\n\t\t\"id\": \"5e71de3c7e4ff73544999695\"\n\t}]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/playlists/:playlist_id/tracks",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"playlists",
								":playlist_id",
								"tracks"
							],
							"variable": [
								{
									"key": "playlist_id",
									"value": "5e7ba9d5f35f503b784bc395",
									"description": "**Type:** string\\\n**Required** The Spotify ID for the playlist."
								}
							]
						},
						"description": "## Description\n\nRemove one or more tracks from a user’s playlist.\n\n## Request\n\nThere are several ways to specify which tracks to remove, determined by the request parameters. \n\n#### Removing all occurrences of specific tracks\nYou can remove all occurrences of a track (or multiple tracks) by specifying only the track ID(s):\n\nFor example: `{ \"tracks\": [{ \"id\": \"4iV5W9uYEdYUVa79Axb7Rh\" },{ \"id\": \"1301WleyT98MSxVHPZCA6M\" }] }`\n\n### Removing a specific occurrence of a track\n\nYou can remove a track from a certain position by specifying both the track ID and the track position in the playlist. \nIf you specify incorrect information (for example, if the given track does not exist at the given position) an error will be returned and the entire request will fail. \nIf you specify multiple deletions and one is malformed, the entire request will be failed and no edits will take place.\n\n\nFor example: ```{ \"tracks\": [{ \"id\": \"4iV5W9uYEdYUVa79Axb7Rh\", \"positions\": [0,3] },{ \"id\": \"1301WleyT98MSxVHPZCA6M\", \"positions\": [7] }] }```\n\nThe `positions` parameter is zero-indexed, that is the first track in the playlist has the value `0` , the second track `1` , and so on.\n\n## Response\n\nOn success, HTTP status code in the response header is `200` OK.\n\nOn error, the header status code is an error code and the response body contains an error object.\\\nTrying to remove a track when you do not have the user’s authorization returns error `403` Forbidden.\\\nAttempting to use several different ways to remove tracks returns `400` Bad Request.\\\nOther client errors returning `400` Bad Request include specifying invalid positions."
					},
					"response": [
						{
							"name": "Remove Tracks from a Playlist",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "**Required** A valid JWT access token.",
										"key": "Authorization",
										"type": "text",
										"value": "{{JWT}}"
									},
									{
										"description": "**Required** The content type of the request body: `application/json`",
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"tracks\": [{\n\t\t\"id\": \"5e71de3c7e4ff73544999695\",\n\t\t\"positions\": [0]\n\t},\n\t{\n\t\t\"id\": \"5e71de3c7e4ff73544999696\"\n\t}]\n}",
									"options": {
										"formdata": {}
									}
								},
								"url": {
									"raw": "{{URL}}api/v1/playlists/:playlist_id/tracks",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"playlists",
										":playlist_id",
										"tracks"
									],
									"variable": [
										{
											"key": "playlist_id",
											"value": "5e7ba9d5f35f503b784bc395",
											"description": "**Type:** string\\\n**Required** The Spotify ID for the playlist."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "83"
								},
								{
									"key": "Date",
									"value": "Wed, 25 Mar 2020 20:09:31 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1585170187"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Content-Length",
									"value": "0"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Upload a Custom Playlist Cover Image (not working for now)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "**Required** A valid JWT access token.",
								"key": "Authorization",
								"type": "text",
								"value": "{{JWT}}"
							},
							{
								"description": "**Required** The content type of the request body: `image/jpeg`",
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "image/jpeg"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "photo",
									"type": "file",
									"src": "/C:/Users/Youse/Pictures/0bea3460-96b1-41c2-8f44-1e60355854d2.jpg"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/playlists/:playlist_id/images",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"playlists",
								":playlist_id",
								"images"
							],
							"variable": [
								{
									"key": "playlist_id",
									"value": "5e7ba9d5f35f503b784bc395",
									"description": "**Type:** string\\\n**Required** The Spotify ID for the playlist."
								}
							]
						},
						"description": "## Description\nReplace the image used to represent a specific playlist.\n\n## Response\nOn success the HTTP status code in the response header is `202` Accepted.\n\nIf you get status code `429`, it means that you have sent too many requests. If this happens, have a look in the `Retry-After` header, where you will see a number displayed. This is the amount of seconds that you need to wait, before you can retry sending your requests.\n\n## Notes\nThe request should be a multi-form request with a file attribute `photo` having the photo attached.\n\nAny none image files are rejected\n\n## Rate Limiting\nIf you get status code `429`, it means that you have sent too many requests. If this happens, have a look in the Retry-After header, where you will see a number displayed. This is the amount of seconds that you need to wait, before you can retry sending your requests."
					},
					"response": [
						{
							"name": "Upload a Custom Playlist Cover Image",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{JWT}}",
										"description": "**Required** A valid JWT access token.",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "image/jpeg",
										"description": "**Required** The content type of the request body: `image/jpeg`",
										"type": "text"
									}
								],
								"body": {
									"mode": "file",
									"file": {}
								},
								"url": {
									"raw": "{{URL}}v1/playlists/:playlist_id/images",
									"host": [
										"{{URL}}v1"
									],
									"path": [
										"playlists",
										":playlist_id",
										"images"
									],
									"variable": [
										{
											"key": "playlist_id",
											"value": "3cEYpjA9oz9GiPac4AsH4n",
											"description": "**Type:** string\\\n**Required** The Spotify ID for the playlist."
										}
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Thu, 05 Mar 2020 15:53:25 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Content-Length",
									"value": "0"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Reorder a Playlist's Tracks",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"description": "**Required** If URIs are passed in the request body, otherwise ignored. The content type of the request body: `application/json`",
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"description": "**Required** A valid JWT access token.",
								"key": "Authorization",
								"type": "text",
								"value": "{{JWT}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "range_start",
									"value": "",
									"description": "**Type:** integer\\\n**Required** The position of the first track to be reordered.\n",
									"type": "text"
								},
								{
									"key": "range_length\t",
									"value": "",
									"description": "**Type:** integer\\\n**Optional** The amount of tracks to be reordered. Defaults to 1 if not set.\nThe range of tracks to be reordered begins from the range_start position, and includes the range_length subsequent tracks.\\\nExample:\nTo move the tracks at index 9-10 to the start of the playlist, range_start is set to 9, and range_length is set to 2.\n",
									"type": "text"
								},
								{
									"key": "insert_before",
									"value": "",
									"description": "**Type:** integer\\\n**Required** The position where the tracks should be inserted.\nTo reorder the tracks to the end of the playlist, simply set insert_before to any position after the last track.\\ \nExamples:\nTo reorder the first track to the last position in a playlist with 10 tracks, set range_start to 0, and insert_before to 10.\nTo reorder the last track in a playlist with 10 tracks to the start of the playlist, set range_start to 9, and insert_before to 0.\n",
									"type": "text"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/playlists/:playlist_id/tracks",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"playlists",
								":playlist_id",
								"tracks"
							],
							"variable": [
								{
									"key": "playlist_id",
									"value": "5e71dd4d7e4ff73544999691",
									"description": "The Spotify ID for the playlist."
								}
							]
						},
						"description": "## Description\nReorder a track or a group of tracks in a playlist.\n\n##### Visualization of how reordering tracks work\n\n![reordering tracks](https://developer.spotify.com/assets/visualization-reordering-tracks.png)\n\n## Response\nOn success, the HTTP status code in the response header is `200` OK.\\\n\\\nOn error, the header status code is an error code, the response body contains an error object, and the existing playlist is unmodified."
					},
					"response": [
						{
							"name": "Reorder a Playlist's Tracks",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"description": "**Required** If URIs are passed in the request body, otherwise ignored. The content type of the request body: `application/json`",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "",
										"description": "**Required** A valid JWT access token.",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"range_start\": 1,\n  \"range_length\": 2,\n  \"insert_before\": 3\n}"
								},
								"url": {
									"raw": "{{url}}v1/playlists/:playlist_id/tracks",
									"host": [
										"{{url}}v1"
									],
									"path": [
										"playlists",
										":playlist_id",
										"tracks"
									],
									"variable": [
										{
											"key": "playlist_id",
											"value": "3cEYpjA9oz9GiPac4AsH4n",
											"description": "The Spotify ID for the playlist."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "82"
								},
								{
									"key": "ETag",
									"value": "W/\"52-tfIOLqNDI36QFTAuLeuv8JJ+ZhY\""
								},
								{
									"key": "Date",
									"value": "Thu, 05 Mar 2020 13:57:26 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"snapshot_id\": \"KsWY41k+zLqbx7goYX9zr+2IUZQtqbBNfk4ZOgEpIurvab4VSHhEL2L4za8HW6D0\"\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Search",
			"item": [
				{
					"name": "Search for an Item [NOT DONE]",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{JWT}}",
								"description": "**Required.** A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user.",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/search?q=roadhouse%20blues&type=album,track&limit=20&offset=0",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "roadhouse%20blues",
									"description": "**Required**.\nSearch query keywords and optional field filters and operators.\nFor example:\n`q=roadhouse%20blues`."
								},
								{
									"key": "type",
									"value": "album,track",
									"description": "**Required**.\nA comma-separated list of item types to search across.\nValid types are: `album`, `artist`, `playlist`, and `track`.\nSearch results include hits from all the specified item types.\nFor example: `q=name:abacab&type=album,track` returns both albums and tracks with “abacab” included in their name."
								},
								{
									"key": "limit",
									"value": "20",
									"description": "**Optional**.\nMaximum number of results to return.\nDefault: 20\nMinimum: 1\nMaximum: 50\n**Note**: The limit is applied within each type, not on the total response.\nFor example, if the limit value is 3 and the type is artist,album, the response contains 3 artists and 3 albums.\n"
								},
								{
									"key": "offset",
									"value": "0",
									"description": "**Optional**.\nThe index of the first result to return.\nDefault: 0 (the first result).\nMaximum offset (including limit): 2,000.\nUse with limit to get the next page of search results."
								}
							]
						},
						"description": "## Description\nGet Spotify Catalog information about artists, albums, tracks or playlists that match a keyword string.\n\n## Response\n##### On success: \n\n* In the response header the HTTP status code is `200` OK.\n* The response body contains an array of `artist objects`, simplified `album objects`, and/or `track objects` wrapped in a paging object in JSON.\n\n##### On error: \n\n* The header status code is an error code.\n* The response body contains an error object."
					},
					"response": [
						{
							"name": "Search for an Item ",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWT}}",
										"description": "**Required.** A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/search?q=roadhouse%20blues&type=album,track&limit=20&offset=0",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "roadhouse%20blues",
											"description": "**Required**.\nSearch query keywords and optional field filters and operators.\nFor example:\n`q=roadhouse%20blues`."
										},
										{
											"key": "type",
											"value": "album,track",
											"description": "**Required**.\nA comma-separated list of item types to search across.\nValid types are: `album`, `artist`, `playlist`, and `track`.\nSearch results include hits from all the specified item types.\nFor example: `q=name:abacab&type=album,track` returns both albums and tracks with “abacab” included in their name."
										},
										{
											"key": "limit",
											"value": "20",
											"description": "**Optional**.\nMaximum number of results to return.\nDefault: 20\nMinimum: 1\nMaximum: 50\n**Note**: The limit is applied within each type, not on the total response.\nFor example, if the limit value is 3 and the type is artist,album, the response contains 3 artists and 3 albums.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "**Optional**.\nThe index of the first result to return.\nDefault: 0 (the first result).\nMaximum offset (including limit): 2,000.\nUse with limit to get the next page of search results."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "777"
								},
								{
									"key": "ETag",
									"value": "W/\"309-ULkQSGgVSYDXT3uWht8f/K6ACAs\""
								},
								{
									"key": "Date",
									"value": "Thu, 05 Mar 2020 20:59:12 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"artists\": {\n        \"href\": \"https://api.spotify.com/v1/search?query=tania+bowra&offset=0&limit=20&type=artist\",\n        \"items\": [\n            {\n                \"external_urls\": {\n                    \"spotify\": \"https://open.spotify.com/artist/08td7MxkoHQkXnWAYD8d6Q\"\n                },\n                \"genres\": [],\n                \"href\": \"https://api.spotify.com/v1/artists/08td7MxkoHQkXnWAYD8d6Q\",\n                \"id\": \"08td7MxkoHQkXnWAYD8d6Q\",\n                \"images\": [\n                    {\n                        \"height\": 640,\n                        \"url\": \"https://i.scdn.co/image/f2798ddab0c7b76dc2d270b65c4f67ddef7f6718\",\n                        \"width\": 640\n                    },\n                    {\n                        \"height\": 300,\n                        \"url\": \"https://i.scdn.co/image/b414091165ea0f4172089c2fc67bb35aa37cfc55\",\n                        \"width\": 300\n                    },\n                    {\n                        \"height\": 64,\n                        \"url\": \"https://i.scdn.co/image/8522fc78be4bf4e83fea8e67bb742e7d3dfe21b4\",\n                        \"width\": 64\n                    }\n                ],\n                \"name\": \"Tania Bowra\",\n                \"popularity\": 0,\n                \"type\": \"artist\",\n                \"uri\": \"spotify:artist:08td7MxkoHQkXnWAYD8d6Q\"\n            }\n        ],\n        \"limit\": 20,\n        \"next\": null,\n        \"offset\": 0,\n        \"previous\": null,\n        \"total\": 1\n    }\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Streaming",
			"item": [
				{
					"name": "Upload Track",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "trackId",
									"value": "5e71de6b7e4ff73544999699",
									"description": "The id of the track specified in the track object",
									"type": "text"
								},
								{
									"key": "track",
									"type": "file",
									"src": "/D:/Sounds/songs/Alan Walker - Faded.mp3"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/streaming",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"streaming"
							]
						},
						"description": "## Description\n\nUploads a track to the server.\n\n## Response\n\nOn success `201 Created` status code is returned, a json success message is returned and a the track is saved on the server.<br/>\n\nOn fail for invalid data `400 Bad Request`  status code and an error object are sent back."
					},
					"response": [
						{
							"name": "Upload track",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "trackId",
											"value": "11dFghVXANMlKmJXsNCbNl",
											"type": "text"
										},
										{
											"key": "track",
											"description": "File path",
											"type": "file",
											"src": "/D:/Sounds/songs/Adele - Rolling in the Deep.mp3"
										}
									]
								},
								"url": {
									"raw": "{{URL}}api/v1/streaming",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"streaming"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "92"
								},
								{
									"key": "Date",
									"value": "Tue, 17 Mar 2020 23:55:07 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1584491717"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "60"
								},
								{
									"key": "ETag",
									"value": "W/\"3c-MQ9/+hBMjAmF3+0qgdclgVlgyPk\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"message\": \"Track Uploaded successfully\"\n}"
						}
					]
				},
				{
					"name": "Download Track",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}",
								"type": "text"
							},
							{
								"key": "Range",
								"value": "bytes=0-",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/streaming/:trackId",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"streaming",
								":trackId"
							],
							"variable": [
								{
									"key": "trackId",
									"value": "5e89e3032e9acf202cc3f28a"
								}
							]
						},
						"description": "## Description\n\nStreams a track from the server to the browser.\n\n## Response\n\nOn success returns `206 Partial Content` if a range is specified in the header and `200 OK` if no range is specified and the track starts streaming to the browser.<br/>\n\nOn fail for invalid data `400 Bad Request`  status code and an error object are sent back."
					},
					"response": [
						{
							"name": "Download track",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/streaming/11dFghVXANMlKmJXsNCbNl",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"streaming",
										"11dFghVXANMlKmJXsNCbNl"
									]
								}
							},
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Tracks",
			"item": [
				{
					"name": "Get Several Tracks",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT}}",
								"description": "**Required** A valid JWT access token",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/tracks?ids=",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"tracks"
							],
							"query": [
								{
									"key": "ids",
									"value": "",
									"description": "**Type:** String\\\n**Required** A comma-separated list of the Spotify IDs for the tracks. Maximum: 50 IDs."
								}
							]
						},
						"description": "## Description\r\nGet Spotify catalog information for multiple tracks based on their Spotify IDs.\r\n\r\n## Response\r\nOn success, the HTTP status code in the response header is `200` OK and the response body contains an object whose key is `tracks` and whose value is an array of track objects in JSON format.\r\n\r\nObjects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position. Duplicate `ids` in the query will result in duplicate objects in the response. On error, the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Get Several Tracks (Done)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{JWT}}",
										"description": "**Required** A valid JWT access token",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/tracks?ids=5e890346412533282c4bd346,5e890346412533282c4bd346,5e890346412533282c4bd342",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"tracks"
									],
									"query": [
										{
											"key": "ids",
											"value": "5e890346412533282c4bd346,5e890346412533282c4bd346,5e890346412533282c4bd342",
											"description": "**Type:** String\\\n**Required** A comma-separated list of the Spotify IDs for the tracks. Maximum: 50 IDs."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "96"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Apr 2020 21:36:05 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586126068"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "719"
								},
								{
									"key": "ETag",
									"value": "W/\"2cf-ikMpYEdxzIdvZURnMlhx1FI5YfA\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"Tracks\": [\n        {\n            \"artists\": [\n                \"5e8902a1412533282c4bd342\"\n            ],\n            \"disc_number\": 1,\n            \"external_urls\": [],\n            \"name\": \"test3\",\n            \"album\": \"5e89e1e22e9acf202cc3f289\",\n            \"duration_ms\": 5000,\n            \"explicit\": false,\n            \"track_number\": 3,\n            \"__v\": 0,\n            \"type\": \"track\",\n            \"uri\": \"spotify:track:5e890346412533282c4bd346\",\n            \"href\": \"http://localhost:3000/api/v1/tracks/5e890346412533282c4bd346\",\n            \"id\": \"5e890346412533282c4bd346\"\n        },\n        {\n            \"artists\": [\n                \"5e8902a1412533282c4bd342\"\n            ],\n            \"disc_number\": 1,\n            \"external_urls\": [],\n            \"name\": \"test3\",\n            \"album\": \"5e89e1e22e9acf202cc3f289\",\n            \"duration_ms\": 5000,\n            \"explicit\": false,\n            \"track_number\": 3,\n            \"__v\": 0,\n            \"type\": \"track\",\n            \"uri\": \"spotify:track:5e890346412533282c4bd346\",\n            \"href\": \"http://localhost:3000/api/v1/tracks/5e890346412533282c4bd346\",\n            \"id\": \"5e890346412533282c4bd346\"\n        },\n        null\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Audio Features for a Track",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT}}",
								"description": "**Requied** A valid JWT access token",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/audio-features/:id",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"audio-features",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						},
						"description": "## Description\r\nGet audio feature information for a single track identified by its unique Spotify ID.\r\n\r\n## Response\r\nOn success, the HTTP status code in the response header is `200 OK` and the response body contains an audio features object in JSON format. On error, the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Get Audio Features for a Track(Done)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{JWT}}",
										"description": "**Requied** A valid JWT access token",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/audio-features/:id",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"audio-features",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "5e890346412533282c4bd346"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "99"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Apr 2020 21:38:18 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586126264"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "327"
								},
								{
									"key": "ETag",
									"value": "W/\"147-9MYccJ31BbL2JKg63L7XWJgivos\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"danceability\": 0.735,\n    \"energy\": 0.578,\n    \"key\": 5,\n    \"loudness\": -11.84,\n    \"mode\": 0,\n    \"speechiness\": 0.0461,\n    \"acousticness\": 0.514,\n    \"instrumentalness\": 0.0902,\n    \"liveness\": 0.159,\n    \"valence\": 0.624,\n    \"tempo\": 98.002,\n    \"track\": \"5e890346412533282c4bd346\",\n    \"duration_ms\": 255349,\n    \"time_signature\": 4,\n    \"__v\": 0,\n    \"type\": \"audio_features\",\n    \"id\": \"5e8a4bb715ecb724ec969c24\"\n}"
						}
					]
				},
				{
					"name": "Get a Track",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"description": "**Required** A valid JWT access token",
								"key": "Authorization",
								"type": "text",
								"value": "{{JWT}}"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/tracks/:id",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"tracks",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "",
									"description": "**Type:** String\\\n**Required** The Spotify ID for the track"
								}
							]
						},
						"description": "## Description\r\nGet Spotify catalog information for a single track identified by its unique Spotify ID.\r\n\r\n## Response\r\nOn success, the HTTP status code in the response header is `200` OK and the response body contains a track object in JSON format. On error, the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Get a Track (Done)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "**Required** A valid JWT access token",
										"key": "Authorization",
										"type": "text",
										"value": "{{JWT}}"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/tracks/:id",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"tracks",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "5e890346412533282c4bd346",
											"description": "**Type:** String\\\n**Required** The Spotify ID for the track"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "98"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Apr 2020 19:23:47 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586117434"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "350"
								},
								{
									"key": "ETag",
									"value": "W/\"15e-wt8JBcltth2g5RDFYvPuIa+83HQ\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"artists\": [\n        \"5e8902a1412533282c4bd342\"\n    ],\n    \"disc_number\": 1,\n    \"external_urls\": [],\n    \"name\": \"test3\",\n    \"album\": \"5e89e1e22e9acf202cc3f289\",\n    \"duration_ms\": 5000,\n    \"explicit\": false,\n    \"track_number\": 3,\n    \"__v\": 0,\n    \"type\": \"track\",\n    \"uri\": \"spotify:track:5e890346412533282c4bd346\",\n    \"href\": \"http://localhost:3000/api/v1/tracks/5e890346412533282c4bd346\",\n    \"id\": \"5e890346412533282c4bd346\"\n}"
						}
					]
				},
				{
					"name": "Remove a track [NOT DONE]",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"description": "**Required** A valid JWT access token",
								"key": "Authorization",
								"type": "text",
								"value": "{{JWT}}"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/tracks/:id",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"tracks",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "5e7be262a6f71b43505febb6",
									"description": "**Type:** String\\\n**Required** The Spotify ID for the track"
								}
							]
						},
						"description": "## Description\r\nRemoves a specific track\r\n\r\n## Response\r\nOn success, the HTTP status code in the response header is `200` OK. On error, the header status code is an error code and the response body contains an error object."
					},
					"response": []
				},
				{
					"name": "Get Audio Features for Several Tracks",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT}}",
								"description": "**Required** A valid JWT access token",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/audio-features?ids=",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"audio-features"
							],
							"query": [
								{
									"key": "ids",
									"value": "",
									"description": "**Type:** String\\\n**Required** A comma-separated list of the Spotify IDs for the tracks. Maximum: 100 IDs.\t"
								}
							]
						},
						"description": "## Description\r\nGet audio features for multiple tracks based on their Spotify IDs.\r\n\r\n## Response\r\nOn success, the HTTP status code in the response header is `200` OK and the response body contains an object whose key is `\"audio_features\"` and whose value is an array of audio features objects in JSON format.\r\n\r\nObjects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position. Duplicate `ids` in the query will result in duplicate objects in the response. On error, the header status code is an error code and the response body contains an error object."
					},
					"response": [
						{
							"name": "Get Audio Features for Several Tracks(Done)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{JWT}}",
										"description": "**Required** A valid JWT access token",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/audio-features?ids=5e890346412533282c4bd346,5e890346412533282c4bd346,5e890346412533282c4bd342",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"audio-features"
									],
									"query": [
										{
											"key": "ids",
											"value": "5e890346412533282c4bd346,5e890346412533282c4bd346,5e890346412533282c4bd342",
											"description": "**Type:** String\\\n**Required** A comma-separated list of the Spotify IDs for the tracks. Maximum: 100 IDs.\t"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "98"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Apr 2020 21:38:57 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586126264"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "680"
								},
								{
									"key": "ETag",
									"value": "W/\"2a8-6N5fKSbV27CuPYEe0E/MvkKb4sE\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"audioFeatures\": [\n        {\n            \"danceability\": 0.735,\n            \"energy\": 0.578,\n            \"key\": 5,\n            \"loudness\": -11.84,\n            \"mode\": 0,\n            \"speechiness\": 0.0461,\n            \"acousticness\": 0.514,\n            \"instrumentalness\": 0.0902,\n            \"liveness\": 0.159,\n            \"valence\": 0.624,\n            \"tempo\": 98.002,\n            \"track\": \"5e890346412533282c4bd346\",\n            \"duration_ms\": 255349,\n            \"time_signature\": 4,\n            \"__v\": 0,\n            \"type\": \"audio_features\",\n            \"id\": \"5e8a4bb715ecb724ec969c24\"\n        },\n        {\n            \"danceability\": 0.735,\n            \"energy\": 0.578,\n            \"key\": 5,\n            \"loudness\": -11.84,\n            \"mode\": 0,\n            \"speechiness\": 0.0461,\n            \"acousticness\": 0.514,\n            \"instrumentalness\": 0.0902,\n            \"liveness\": 0.159,\n            \"valence\": 0.624,\n            \"tempo\": 98.002,\n            \"track\": \"5e890346412533282c4bd346\",\n            \"duration_ms\": 255349,\n            \"time_signature\": 4,\n            \"__v\": 0,\n            \"type\": \"audio_features\",\n            \"id\": \"5e8a4bb715ecb724ec969c24\"\n        },\n        null\n    ]\n}"
						}
					]
				},
				{
					"name": "Create a track",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t  \"name\": \"test6\",\n      \"album\": \"5e89e1e22e9acf202cc3f289\",\n      \"disc_number\": 1,\n      \"duration_ms\": 5000,\n      \"explicit\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/tracks",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"tracks"
							]
						},
						"description": "## Description\nAdds a new track \n\n## Response\nOn Success, the response body contains the created Track object and the response header is `201` Created. On error, the header status code is an `error code` and the response body contains an error object."
					},
					"response": [
						{
							"name": "Create a track(Done)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t  \"name\": \"test4\",\n      \"album\": \"5e89e1e22e9acf202cc3f289\",\n      \"disc_number\": 1,\n      \"duration_ms\": 5000,\n      \"explicit\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}api/v1/tracks",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"tracks"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "95"
								},
								{
									"key": "Date",
									"value": "Sun, 05 Apr 2020 19:49:52 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586119355"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "ETag",
									"value": "W/\"2-vyGp6PvFo4RvsFtPoIWeCReyIC8\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{}"
						}
					]
				},
				{
					"name": "Add Audio Features for a track",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"danceability\": 0.735,\r\n    \"energy\": 0.578,\r\n    \"key\": 5,\r\n    \"loudness\": -11.84,\r\n    \"mode\": 0,\r\n    \"speechiness\": 0.0461,\r\n    \"acousticness\": 0.514,\r\n    \"instrumentalness\": 0.0902,\r\n    \"liveness\": 0.159,\r\n    \"valence\": 0.624,\r\n    \"tempo\": 98.002,\r\n    \"type\": \"audio_features\",\r\n    \"track\": \"5e8a36601bb41f3d5488df12\",\r\n    \"duration_ms\": 255349,\r\n    \"time_signature\": 4\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}api/v1/audio-features",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"audio-features"
							]
						},
						"description": "## Description\nAdds Audio Features for a specific track\n\n## Response\nOn Success, the response body contains the created audio features object and the response header is `201` Created. On error, the header status code is an `error code` and the response body contains an error object."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "User Profile",
			"item": [
				{
					"name": "Get Current User's Profile",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{JWT}}",
								"description": "Required. A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user.",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/users/me",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"users",
								"me"
							]
						},
						"description": "## Description\nGet detailed profile information about the current user (including the current user’s username).\n\n## Response \nOn success, the HTTP status code in the response header is `200` OK and the response body contains a user object in JSON format. On error, the header status code is an error code and the response body contains an error object. When requesting fields that you don’t have the user’s authorization to access, it will return error `403` Forbidden."
					},
					"response": [
						{
							"name": "Get Current User's Profile [ ✅ DONE ]",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWT}}",
										"description": "Required. A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/users/me",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"users",
										"me"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "99"
								},
								{
									"key": "Date",
									"value": "Tue, 24 Mar 2020 20:21:12 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1585084868"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "361"
								},
								{
									"key": "ETag",
									"value": "W/\"169-fE2PN5ACutPcceGU35Ynw078Pig\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"type\": \"user\",\n    \"product\": \"free\",\n    \"image\": null,\n    \"currentlyPlaying\": null,\n    \"followers\": 22,\n    \"following\": [],\n    \"_id\": \"5e6fc6ebb8715b3f1dc40b80\",\n    \"name\": \"Nasser\",\n    \"email\": \"hi@nasser.com\",\n    \"gender\": \"m\",\n    \"birthdate\": \"1999-05-17T00:00:00.000Z\",\n    \"country\": \"EG\",\n    \"devices\": [],\n    \"__v\": 1,\n    \"followedPlaylists\": [],\n    \"uri\": \"spotify:user:5e6fc6ebb8715b3f1dc40b80\",\n    \"id\": \"5e6fc6ebb8715b3f1dc40b80\"\n}"
						}
					]
				},
				{
					"name": "Get a User's Profile",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{JWT}}",
								"description": "Required. A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user.",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/v1/users/5e6ba1cc8059300a6721906f",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"users",
								"5e6ba1cc8059300a6721906f"
							]
						},
						"description": "## Description\nGet public profile information about a user.\n\n## Response\nOn success, the HTTP status code in the response header is `200` OK and the response body contains a user object in JSON format. On error, the header status code is an error code and the response body contains an error object. If a user with that user_id doesn’t exist, the status code is `404` NOT FOUND."
					},
					"response": [
						{
							"name": "Get a User's Profile [ ✅ DONE ]",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWT}}",
										"description": "Required. A valid access token from the Spotify Accounts service: see the Web API Authorization Guide for details. The access token must have been issued on behalf of the current user.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}api/v1/users/5e6fc6ebb8715b3f1dc40b80",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"users",
										"5e6fc6ebb8715b3f1dc40b80"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "99"
								},
								{
									"key": "Date",
									"value": "Tue, 24 Mar 2020 21:26:53 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1585088811"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "157"
								},
								{
									"key": "ETag",
									"value": "W/\"9d-hfULLM4CeTApuex+SXa/b7ffb8E\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"type\": \"user\",\n    \"followers\": 22,\n    \"_id\": \"5e6fc6ebb8715b3f1dc40b80\",\n    \"name\": \"nasser\",\n    \"uri\": \"spotify:user:5e6fc6ebb8715b3f1dc40b80\",\n    \"id\": \"5e6fc6ebb8715b3f1dc40b80\"\n}"
						}
					]
				},
				{
					"name": "Update My Info",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "",
									"description": "**( Optional )** : the updated name of the user\n**Type** : String",
									"type": "text"
								},
								{
									"key": "gender",
									"value": "",
									"description": "**( Optional )** : the updated gender of the user\n**Type** : String",
									"type": "text"
								},
								{
									"key": "phoneNumber",
									"value": "",
									"description": "**( Optional )** : the updated phoneNumber of the user\n**Type** : String",
									"type": "text"
								},
								{
									"key": "birthdate",
									"value": "",
									"description": "**( Optional )** : the updated birthdate of the user\n**Type** : Date",
									"type": "text"
								},
								{
									"key": "country",
									"value": "",
									"description": "**( Optional )** : the updated country of the user\n**Type** : String",
									"type": "text"
								}
							],
							"options": {}
						},
						"url": {
							"raw": "{{URL}}api/v1/users",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"v1",
								"users"
							]
						}
					},
					"response": [
						{
							"name": "Update My Info [ ✅DONE ]",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"nasser\",\n\t\"gender\": \"m\",\n\t\"birthdate\": \"1999-2-2\",\n\t\"country\": \"EG\",\n\t\"phoneNumber\": \"+201110183946\"\n}"
								},
								"url": {
									"raw": "{{URL}}api/v1/users",
									"host": [
										"{{URL}}api"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "98"
								},
								{
									"key": "Date",
									"value": "Sat, 04 Apr 2020 21:12:26 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1586038299"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "618"
								},
								{
									"key": "ETag",
									"value": "W/\"26a-ZBlnVa3p4ymlX/T8fr+81WHbNvo\""
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"type\": \"user\",\n    \"product\": \"free\",\n    \"image\": null,\n    \"online\": false,\n    \"active\": true,\n    \"currentlyPlaying\": {\n        \"track\": null,\n        \"timestamp\": null,\n        \"repeat_state\": false,\n        \"shuffle_state\": false,\n        \"volume_percent\": 60,\n        \"is_playing\": false,\n        \"progress_ms\": 0\n    },\n    \"followers\": 0,\n    \"following\": [],\n    \"_id\": \"5e88f60fe1fabd2f04ec28e6\",\n    \"name\": \"nasser\",\n    \"email\": \"hi@nasser.com\",\n    \"password\": \"$2a$12$1JndmAjKCxl24WrdfMitXu2.igXp0ayyNTR1eY8G0grJvvWPsQPC6\",\n    \"gender\": \"m\",\n    \"birthdate\": \"1999-02-01T22:00:00.000Z\",\n    \"country\": \"EG\",\n    \"devices\": [],\n    \"followedPlaylists\": [],\n    \"__v\": 0,\n    \"phoneNumber\": \"+201110183946\",\n    \"uri\": \"spotify:user:5e88f60fe1fabd2f04ec28e6\",\n    \"id\": \"5e88f60fe1fabd2f04ec28e6\"\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}